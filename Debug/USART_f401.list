
USART_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00006e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e84  08005e84  00006e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005e88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000006c  08005ef4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005ef4  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f00  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206b  00000000  00000000  00010f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00013008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074b  00000000  00000000  00013990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa4  00000000  00000000  000140db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcb4  00000000  00000000  0002ab7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bc8  00000000  00000000  00036833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be3fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  000be440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c1564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058b0 	.word	0x080058b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080058b0 	.word	0x080058b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <check>:
"CURERRLOCK2", "CURERRDRIVE1", "CURERRDRIVE2", "CURERRDRIVE3",
"CURERRDRIVE4", "CURERRTIME", "STOTIMELOCK", "STOTIMEDRIVE",
"SAVEFLASH", "READFLASH" }; //словарь
int s = sizeof(str_array) / sizeof(str_array[14]); //РАЗМЕР ДВУМЕРНОГО МАССИВА
int check(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	if (readBuf[0] != 'A' || readBuf[1] != 'T' || readBuf[2] != '+')
 8000586:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <check+0x68>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b41      	cmp	r3, #65	@ 0x41
 800058c:	d107      	bne.n	800059e <check+0x1e>
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <check+0x68>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	2b54      	cmp	r3, #84	@ 0x54
 8000594:	d103      	bne.n	800059e <check+0x1e>
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <check+0x68>)
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	2b2b      	cmp	r3, #43	@ 0x2b
 800059c:	d002      	beq.n	80005a4 <check+0x24>
		return (-1);
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e01c      	b.n	80005de <check+0x5e>
	for (int j = 0; j < s; j++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	e012      	b.n	80005d0 <check+0x50>
	{
		if ((strstr(readBuf, str_array[j])) != NULL)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <check+0x6c>)
 80005b6:	4413      	add	r3, r2
 80005b8:	4619      	mov	r1, r3
 80005ba:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <check+0x68>)
 80005bc:	f003 fd21 	bl	8004002 <strstr>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <check+0x4a>
			return (j);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	e009      	b.n	80005de <check+0x5e>
	for (int j = 0; j < s; j++)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3301      	adds	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <check+0x70>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dbe7      	blt.n	80005aa <check+0x2a>
	}
	return (-1);
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	08005bf8 	.word	0x08005bf8
 80005f0:	20000000 	.word	0x20000000

080005f4 <SPD>:
void SPD()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	if (readBuf[6] == '?' && readBuf[7] == '\r')
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SPD+0x84>)
 80005fa:	799b      	ldrb	r3, [r3, #6]
 80005fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80005fe:	d109      	bne.n	8000614 <SPD+0x20>
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <SPD+0x84>)
 8000602:	79db      	ldrb	r3, [r3, #7]
 8000604:	2b0d      	cmp	r3, #13
 8000606:	d105      	bne.n	8000614 <SPD+0x20>
		sprintf(writeBuf, "%s\r\n", "Connection speed"); //Выдать описание команды
 8000608:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <SPD+0x88>)
 800060a:	491d      	ldr	r1, [pc, #116]	@ (8000680 <SPD+0x8c>)
 800060c:	481d      	ldr	r0, [pc, #116]	@ (8000684 <SPD+0x90>)
 800060e:	f003 fc61 	bl	8003ed4 <siprintf>
 8000612:	e004      	b.n	800061e <SPD+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000614:	4a1c      	ldr	r2, [pc, #112]	@ (8000688 <SPD+0x94>)
 8000616:	491a      	ldr	r1, [pc, #104]	@ (8000680 <SPD+0x8c>)
 8000618:	481a      	ldr	r0, [pc, #104]	@ (8000684 <SPD+0x90>)
 800061a:	f003 fc5b 	bl	8003ed4 <siprintf>
	if (readBuf[6] == '=') //=
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <SPD+0x84>)
 8000620:	799b      	ldrb	r3, [r3, #6]
 8000622:	2b3d      	cmp	r3, #61	@ 0x3d
 8000624:	d125      	bne.n	8000672 <SPD+0x7e>
	{
		if (readBuf[7] == '?') //=?
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <SPD+0x84>)
 8000628:	79db      	ldrb	r3, [r3, #7]
 800062a:	2b3f      	cmp	r3, #63	@ 0x3f
 800062c:	d107      	bne.n	800063e <SPD+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "SPD:", par.val0); //выдать текущее значение параметра
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <SPD+0x98>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <SPD+0x9c>)
 8000634:	4917      	ldr	r1, [pc, #92]	@ (8000694 <SPD+0xa0>)
 8000636:	4813      	ldr	r0, [pc, #76]	@ (8000684 <SPD+0x90>)
 8000638:	f003 fc4c 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 800063c:	e019      	b.n	8000672 <SPD+0x7e>
			if (isdigit(readBuf[7]))
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <SPD+0x84>)
 8000640:	79db      	ldrb	r3, [r3, #7]
 8000642:	3301      	adds	r3, #1
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <SPD+0xa4>)
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00a      	beq.n	8000668 <SPD+0x74>
				sscanf(&readBuf[7], "%d", &par.val0); //присвоить новое значение
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <SPD+0xa8>)
 8000654:	4912      	ldr	r1, [pc, #72]	@ (80006a0 <SPD+0xac>)
 8000656:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <SPD+0xb0>)
 8000658:	f003 fc5c 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 800065c:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <SPD+0xb4>)
 800065e:	4908      	ldr	r1, [pc, #32]	@ (8000680 <SPD+0x8c>)
 8000660:	4808      	ldr	r0, [pc, #32]	@ (8000684 <SPD+0x90>)
 8000662:	f003 fc37 	bl	8003ed4 <siprintf>
}
 8000666:	e004      	b.n	8000672 <SPD+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <SPD+0x94>)
 800066a:	4905      	ldr	r1, [pc, #20]	@ (8000680 <SPD+0x8c>)
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <SPD+0x90>)
 800066e:	f003 fc31 	bl	8003ed4 <siprintf>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000008c 	.word	0x2000008c
 800067c:	080058c8 	.word	0x080058c8
 8000680:	080058dc 	.word	0x080058dc
 8000684:	200000b4 	.word	0x200000b4
 8000688:	080058e4 	.word	0x080058e4
 800068c:	20000178 	.word	0x20000178
 8000690:	080058ec 	.word	0x080058ec
 8000694:	080058f4 	.word	0x080058f4
 8000698:	08005d28 	.word	0x08005d28
 800069c:	2000017c 	.word	0x2000017c
 80006a0:	080058fc 	.word	0x080058fc
 80006a4:	20000093 	.word	0x20000093
 80006a8:	08005900 	.word	0x08005900

080006ac <LNOPEN>:
void LNOPEN()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	if (readBuf[9] == '?' && readBuf[10] == '\r')
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <LNOPEN+0x84>)
 80006b2:	7a5b      	ldrb	r3, [r3, #9]
 80006b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006b6:	d109      	bne.n	80006cc <LNOPEN+0x20>
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <LNOPEN+0x84>)
 80006ba:	7a9b      	ldrb	r3, [r3, #10]
 80006bc:	2b0d      	cmp	r3, #13
 80006be:	d105      	bne.n	80006cc <LNOPEN+0x20>
		sprintf(writeBuf, "%s\r\n", "Full opening distance"); //Выдать описание команды
 80006c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <LNOPEN+0x88>)
 80006c2:	491d      	ldr	r1, [pc, #116]	@ (8000738 <LNOPEN+0x8c>)
 80006c4:	481d      	ldr	r0, [pc, #116]	@ (800073c <LNOPEN+0x90>)
 80006c6:	f003 fc05 	bl	8003ed4 <siprintf>
 80006ca:	e004      	b.n	80006d6 <LNOPEN+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 80006cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <LNOPEN+0x94>)
 80006ce:	491a      	ldr	r1, [pc, #104]	@ (8000738 <LNOPEN+0x8c>)
 80006d0:	481a      	ldr	r0, [pc, #104]	@ (800073c <LNOPEN+0x90>)
 80006d2:	f003 fbff 	bl	8003ed4 <siprintf>
	if (readBuf[9] == '=') //=
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <LNOPEN+0x84>)
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	2b3d      	cmp	r3, #61	@ 0x3d
 80006dc:	d125      	bne.n	800072a <LNOPEN+0x7e>
	{
		if (readBuf[10] == '?') //=?
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <LNOPEN+0x84>)
 80006e0:	7a9b      	ldrb	r3, [r3, #10]
 80006e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80006e4:	d107      	bne.n	80006f6 <LNOPEN+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "LNOPEN:", par.val1); //выдать текущее значение параметра
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <LNOPEN+0x98>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <LNOPEN+0x9c>)
 80006ec:	4917      	ldr	r1, [pc, #92]	@ (800074c <LNOPEN+0xa0>)
 80006ee:	4813      	ldr	r0, [pc, #76]	@ (800073c <LNOPEN+0x90>)
 80006f0:	f003 fbf0 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 80006f4:	e019      	b.n	800072a <LNOPEN+0x7e>
			if (isdigit(readBuf[10]))
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <LNOPEN+0x84>)
 80006f8:	7a9b      	ldrb	r3, [r3, #10]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <LNOPEN+0xa4>)
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00a      	beq.n	8000720 <LNOPEN+0x74>
				sscanf(&readBuf[10], "%d", &par.val1); //присвоить новое значение
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <LNOPEN+0xa8>)
 800070c:	4912      	ldr	r1, [pc, #72]	@ (8000758 <LNOPEN+0xac>)
 800070e:	4813      	ldr	r0, [pc, #76]	@ (800075c <LNOPEN+0xb0>)
 8000710:	f003 fc00 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000714:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <LNOPEN+0xb4>)
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <LNOPEN+0x8c>)
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <LNOPEN+0x90>)
 800071a:	f003 fbdb 	bl	8003ed4 <siprintf>
}
 800071e:	e004      	b.n	800072a <LNOPEN+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000720:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <LNOPEN+0x94>)
 8000722:	4905      	ldr	r1, [pc, #20]	@ (8000738 <LNOPEN+0x8c>)
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <LNOPEN+0x90>)
 8000726:	f003 fbd5 	bl	8003ed4 <siprintf>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c
 8000734:	08005904 	.word	0x08005904
 8000738:	080058dc 	.word	0x080058dc
 800073c:	200000b4 	.word	0x200000b4
 8000740:	080058e4 	.word	0x080058e4
 8000744:	20000178 	.word	0x20000178
 8000748:	0800591c 	.word	0x0800591c
 800074c:	080058f4 	.word	0x080058f4
 8000750:	08005d28 	.word	0x08005d28
 8000754:	20000184 	.word	0x20000184
 8000758:	080058fc 	.word	0x080058fc
 800075c:	20000096 	.word	0x20000096
 8000760:	08005900 	.word	0x08005900

08000764 <LNHLOPEN>:
void LNHLOPEN()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (readBuf[11] == '?' && readBuf[12] == '\r')//Выдать описание команды
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <LNHLOPEN+0x84>)
 800076a:	7adb      	ldrb	r3, [r3, #11]
 800076c:	2b3f      	cmp	r3, #63	@ 0x3f
 800076e:	d109      	bne.n	8000784 <LNHLOPEN+0x20>
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <LNHLOPEN+0x84>)
 8000772:	7b1b      	ldrb	r3, [r3, #12]
 8000774:	2b0d      	cmp	r3, #13
 8000776:	d105      	bne.n	8000784 <LNHLOPEN+0x20>
		sprintf(writeBuf, "%s\r\n", "Incomplete opening distance");
 8000778:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <LNHLOPEN+0x88>)
 800077a:	491d      	ldr	r1, [pc, #116]	@ (80007f0 <LNHLOPEN+0x8c>)
 800077c:	481d      	ldr	r0, [pc, #116]	@ (80007f4 <LNHLOPEN+0x90>)
 800077e:	f003 fba9 	bl	8003ed4 <siprintf>
 8000782:	e004      	b.n	800078e <LNHLOPEN+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000784:	4a1c      	ldr	r2, [pc, #112]	@ (80007f8 <LNHLOPEN+0x94>)
 8000786:	491a      	ldr	r1, [pc, #104]	@ (80007f0 <LNHLOPEN+0x8c>)
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <LNHLOPEN+0x90>)
 800078a:	f003 fba3 	bl	8003ed4 <siprintf>
	if (readBuf[11] == '=')//=
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <LNHLOPEN+0x84>)
 8000790:	7adb      	ldrb	r3, [r3, #11]
 8000792:	2b3d      	cmp	r3, #61	@ 0x3d
 8000794:	d125      	bne.n	80007e2 <LNHLOPEN+0x7e>
	{
		if (readBuf[12] == '?')//=?
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <LNHLOPEN+0x84>)
 8000798:	7b1b      	ldrb	r3, [r3, #12]
 800079a:	2b3f      	cmp	r3, #63	@ 0x3f
 800079c:	d107      	bne.n	80007ae <LNHLOPEN+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "LNHLOPEN:", par.val2); //выдать текущее значение параметра
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <LNHLOPEN+0x98>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <LNHLOPEN+0x9c>)
 80007a4:	4917      	ldr	r1, [pc, #92]	@ (8000804 <LNHLOPEN+0xa0>)
 80007a6:	4813      	ldr	r0, [pc, #76]	@ (80007f4 <LNHLOPEN+0x90>)
 80007a8:	f003 fb94 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 80007ac:	e019      	b.n	80007e2 <LNHLOPEN+0x7e>
			if (isdigit(readBuf[12]))
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <LNHLOPEN+0x84>)
 80007b0:	7b1b      	ldrb	r3, [r3, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <LNHLOPEN+0xa4>)
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <LNHLOPEN+0x74>
				sscanf(&readBuf[12], "%d", &par.val2); //присвоить новое значение
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <LNHLOPEN+0xa8>)
 80007c4:	4912      	ldr	r1, [pc, #72]	@ (8000810 <LNHLOPEN+0xac>)
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <LNHLOPEN+0xb0>)
 80007c8:	f003 fba4 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <LNHLOPEN+0xb4>)
 80007ce:	4908      	ldr	r1, [pc, #32]	@ (80007f0 <LNHLOPEN+0x8c>)
 80007d0:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <LNHLOPEN+0x90>)
 80007d2:	f003 fb7f 	bl	8003ed4 <siprintf>
}
 80007d6:	e004      	b.n	80007e2 <LNHLOPEN+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <LNHLOPEN+0x94>)
 80007da:	4905      	ldr	r1, [pc, #20]	@ (80007f0 <LNHLOPEN+0x8c>)
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <LNHLOPEN+0x90>)
 80007de:	f003 fb79 	bl	8003ed4 <siprintf>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	08005924 	.word	0x08005924
 80007f0:	080058dc 	.word	0x080058dc
 80007f4:	200000b4 	.word	0x200000b4
 80007f8:	080058e4 	.word	0x080058e4
 80007fc:	20000178 	.word	0x20000178
 8000800:	08005940 	.word	0x08005940
 8000804:	080058f4 	.word	0x080058f4
 8000808:	08005d28 	.word	0x08005d28
 800080c:	2000018c 	.word	0x2000018c
 8000810:	080058fc 	.word	0x080058fc
 8000814:	20000098 	.word	0x20000098
 8000818:	08005900 	.word	0x08005900

0800081c <CURERRLOCK1>:
void CURERRLOCK1()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	if (readBuf[14] == '?' && readBuf[15] == '\r')     //Выдать описание команды
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <CURERRLOCK1+0x84>)
 8000822:	7b9b      	ldrb	r3, [r3, #14]
 8000824:	2b3f      	cmp	r3, #63	@ 0x3f
 8000826:	d109      	bne.n	800083c <CURERRLOCK1+0x20>
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <CURERRLOCK1+0x84>)
 800082a:	7bdb      	ldrb	r3, [r3, #15]
 800082c:	2b0d      	cmp	r3, #13
 800082e:	d105      	bne.n	800083c <CURERRLOCK1+0x20>
		sprintf(writeBuf, "%s\r\n","Emergency current value of the lock line 1");
 8000830:	4a1c      	ldr	r2, [pc, #112]	@ (80008a4 <CURERRLOCK1+0x88>)
 8000832:	491d      	ldr	r1, [pc, #116]	@ (80008a8 <CURERRLOCK1+0x8c>)
 8000834:	481d      	ldr	r0, [pc, #116]	@ (80008ac <CURERRLOCK1+0x90>)
 8000836:	f003 fb4d 	bl	8003ed4 <siprintf>
 800083a:	e004      	b.n	8000846 <CURERRLOCK1+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 800083c:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <CURERRLOCK1+0x94>)
 800083e:	491a      	ldr	r1, [pc, #104]	@ (80008a8 <CURERRLOCK1+0x8c>)
 8000840:	481a      	ldr	r0, [pc, #104]	@ (80008ac <CURERRLOCK1+0x90>)
 8000842:	f003 fb47 	bl	8003ed4 <siprintf>
	if (readBuf[14] == '=')//=
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <CURERRLOCK1+0x84>)
 8000848:	7b9b      	ldrb	r3, [r3, #14]
 800084a:	2b3d      	cmp	r3, #61	@ 0x3d
 800084c:	d125      	bne.n	800089a <CURERRLOCK1+0x7e>
	{
		if (readBuf[15] == '?')//=?
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <CURERRLOCK1+0x84>)
 8000850:	7bdb      	ldrb	r3, [r3, #15]
 8000852:	2b3f      	cmp	r3, #63	@ 0x3f
 8000854:	d107      	bne.n	8000866 <CURERRLOCK1+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRLOCK1:", par.val3); //выдать текущее значение параметра
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <CURERRLOCK1+0x98>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <CURERRLOCK1+0x9c>)
 800085c:	4917      	ldr	r1, [pc, #92]	@ (80008bc <CURERRLOCK1+0xa0>)
 800085e:	4813      	ldr	r0, [pc, #76]	@ (80008ac <CURERRLOCK1+0x90>)
 8000860:	f003 fb38 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000864:	e019      	b.n	800089a <CURERRLOCK1+0x7e>
			if (isdigit(readBuf[15]))
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <CURERRLOCK1+0x84>)
 8000868:	7bdb      	ldrb	r3, [r3, #15]
 800086a:	3301      	adds	r3, #1
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <CURERRLOCK1+0xa4>)
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00a      	beq.n	8000890 <CURERRLOCK1+0x74>
				sscanf(&readBuf[15], "%d", &par.val3); //присвоить новое значение
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <CURERRLOCK1+0xa8>)
 800087c:	4912      	ldr	r1, [pc, #72]	@ (80008c8 <CURERRLOCK1+0xac>)
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <CURERRLOCK1+0xb0>)
 8000880:	f003 fb48 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000884:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <CURERRLOCK1+0xb4>)
 8000886:	4908      	ldr	r1, [pc, #32]	@ (80008a8 <CURERRLOCK1+0x8c>)
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <CURERRLOCK1+0x90>)
 800088a:	f003 fb23 	bl	8003ed4 <siprintf>
}
 800088e:	e004      	b.n	800089a <CURERRLOCK1+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <CURERRLOCK1+0x94>)
 8000892:	4905      	ldr	r1, [pc, #20]	@ (80008a8 <CURERRLOCK1+0x8c>)
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <CURERRLOCK1+0x90>)
 8000896:	f003 fb1d 	bl	8003ed4 <siprintf>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	0800594c 	.word	0x0800594c
 80008a8:	080058dc 	.word	0x080058dc
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	080058e4 	.word	0x080058e4
 80008b4:	20000178 	.word	0x20000178
 80008b8:	08005978 	.word	0x08005978
 80008bc:	080058f4 	.word	0x080058f4
 80008c0:	08005d28 	.word	0x08005d28
 80008c4:	20000194 	.word	0x20000194
 80008c8:	080058fc 	.word	0x080058fc
 80008cc:	2000009b 	.word	0x2000009b
 80008d0:	08005900 	.word	0x08005900

080008d4 <CURERRLOCK2>:
void CURERRLOCK2()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	if (readBuf[14] == '?' && readBuf[15] == '\r')     //Выдать описание команды
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <CURERRLOCK2+0x84>)
 80008da:	7b9b      	ldrb	r3, [r3, #14]
 80008dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80008de:	d109      	bne.n	80008f4 <CURERRLOCK2+0x20>
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <CURERRLOCK2+0x84>)
 80008e2:	7bdb      	ldrb	r3, [r3, #15]
 80008e4:	2b0d      	cmp	r3, #13
 80008e6:	d105      	bne.n	80008f4 <CURERRLOCK2+0x20>
		sprintf(writeBuf, "%s\r\n","Emergency current value of the lock line 2");
 80008e8:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <CURERRLOCK2+0x88>)
 80008ea:	491d      	ldr	r1, [pc, #116]	@ (8000960 <CURERRLOCK2+0x8c>)
 80008ec:	481d      	ldr	r0, [pc, #116]	@ (8000964 <CURERRLOCK2+0x90>)
 80008ee:	f003 faf1 	bl	8003ed4 <siprintf>
 80008f2:	e004      	b.n	80008fe <CURERRLOCK2+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 80008f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <CURERRLOCK2+0x94>)
 80008f6:	491a      	ldr	r1, [pc, #104]	@ (8000960 <CURERRLOCK2+0x8c>)
 80008f8:	481a      	ldr	r0, [pc, #104]	@ (8000964 <CURERRLOCK2+0x90>)
 80008fa:	f003 faeb 	bl	8003ed4 <siprintf>
	if (readBuf[14] == '=')//=
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <CURERRLOCK2+0x84>)
 8000900:	7b9b      	ldrb	r3, [r3, #14]
 8000902:	2b3d      	cmp	r3, #61	@ 0x3d
 8000904:	d125      	bne.n	8000952 <CURERRLOCK2+0x7e>
	{
		if (readBuf[15] == '?')//=?
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <CURERRLOCK2+0x84>)
 8000908:	7bdb      	ldrb	r3, [r3, #15]
 800090a:	2b3f      	cmp	r3, #63	@ 0x3f
 800090c:	d107      	bne.n	800091e <CURERRLOCK2+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRLOCK2:", par.val4); //выдать текущее значение параметра
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <CURERRLOCK2+0x98>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <CURERRLOCK2+0x9c>)
 8000914:	4917      	ldr	r1, [pc, #92]	@ (8000974 <CURERRLOCK2+0xa0>)
 8000916:	4813      	ldr	r0, [pc, #76]	@ (8000964 <CURERRLOCK2+0x90>)
 8000918:	f003 fadc 	bl	8003ed4 <siprintf>
			}
			else
				printf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 800091c:	e019      	b.n	8000952 <CURERRLOCK2+0x7e>
			if (isdigit(readBuf[15]))
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <CURERRLOCK2+0x84>)
 8000920:	7bdb      	ldrb	r3, [r3, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <CURERRLOCK2+0xa4>)
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00a      	beq.n	8000948 <CURERRLOCK2+0x74>
				sscanf(&readBuf[15], "%d", &par.val4); //присвоить новое значение
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <CURERRLOCK2+0xa8>)
 8000934:	4912      	ldr	r1, [pc, #72]	@ (8000980 <CURERRLOCK2+0xac>)
 8000936:	4813      	ldr	r0, [pc, #76]	@ (8000984 <CURERRLOCK2+0xb0>)
 8000938:	f003 faec 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 800093c:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <CURERRLOCK2+0xb4>)
 800093e:	4908      	ldr	r1, [pc, #32]	@ (8000960 <CURERRLOCK2+0x8c>)
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <CURERRLOCK2+0x90>)
 8000942:	f003 fac7 	bl	8003ed4 <siprintf>
}
 8000946:	e004      	b.n	8000952 <CURERRLOCK2+0x7e>
				printf(writeBuf, "%s\r\n", "Error");
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <CURERRLOCK2+0x94>)
 800094a:	4905      	ldr	r1, [pc, #20]	@ (8000960 <CURERRLOCK2+0x8c>)
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <CURERRLOCK2+0x90>)
 800094e:	f003 faaf 	bl	8003eb0 <iprintf>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000008c 	.word	0x2000008c
 800095c:	08005988 	.word	0x08005988
 8000960:	080058dc 	.word	0x080058dc
 8000964:	200000b4 	.word	0x200000b4
 8000968:	080058e4 	.word	0x080058e4
 800096c:	20000178 	.word	0x20000178
 8000970:	080059b4 	.word	0x080059b4
 8000974:	080058f4 	.word	0x080058f4
 8000978:	08005d28 	.word	0x08005d28
 800097c:	2000019c 	.word	0x2000019c
 8000980:	080058fc 	.word	0x080058fc
 8000984:	2000009b 	.word	0x2000009b
 8000988:	08005900 	.word	0x08005900

0800098c <CURERRDRIVE1>:
void CURERRDRIVE1()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	if (readBuf[15] == '?' && readBuf[16] == '\r')     //Выдать описание команды
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <CURERRDRIVE1+0x84>)
 8000992:	7bdb      	ldrb	r3, [r3, #15]
 8000994:	2b3f      	cmp	r3, #63	@ 0x3f
 8000996:	d109      	bne.n	80009ac <CURERRDRIVE1+0x20>
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <CURERRDRIVE1+0x84>)
 800099a:	7c1b      	ldrb	r3, [r3, #16]
 800099c:	2b0d      	cmp	r3, #13
 800099e:	d105      	bne.n	80009ac <CURERRDRIVE1+0x20>
		sprintf(writeBuf, "%s\r\n","Emergency current value of the window 1 drive circuit line");
 80009a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <CURERRDRIVE1+0x88>)
 80009a2:	491d      	ldr	r1, [pc, #116]	@ (8000a18 <CURERRDRIVE1+0x8c>)
 80009a4:	481d      	ldr	r0, [pc, #116]	@ (8000a1c <CURERRDRIVE1+0x90>)
 80009a6:	f003 fa95 	bl	8003ed4 <siprintf>
 80009aa:	e004      	b.n	80009b6 <CURERRDRIVE1+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 80009ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <CURERRDRIVE1+0x94>)
 80009ae:	491a      	ldr	r1, [pc, #104]	@ (8000a18 <CURERRDRIVE1+0x8c>)
 80009b0:	481a      	ldr	r0, [pc, #104]	@ (8000a1c <CURERRDRIVE1+0x90>)
 80009b2:	f003 fa8f 	bl	8003ed4 <siprintf>
	if (readBuf[15] == '=')//=
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <CURERRDRIVE1+0x84>)
 80009b8:	7bdb      	ldrb	r3, [r3, #15]
 80009ba:	2b3d      	cmp	r3, #61	@ 0x3d
 80009bc:	d125      	bne.n	8000a0a <CURERRDRIVE1+0x7e>
	{
		if (readBuf[16] == '?')//=?
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <CURERRDRIVE1+0x84>)
 80009c0:	7c1b      	ldrb	r3, [r3, #16]
 80009c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009c4:	d107      	bne.n	80009d6 <CURERRDRIVE1+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRDRIVE1:", par.val5); //выдать текущее значение параметра
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <CURERRDRIVE1+0x98>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <CURERRDRIVE1+0x9c>)
 80009cc:	4917      	ldr	r1, [pc, #92]	@ (8000a2c <CURERRDRIVE1+0xa0>)
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <CURERRDRIVE1+0x90>)
 80009d0:	f003 fa80 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 80009d4:	e019      	b.n	8000a0a <CURERRDRIVE1+0x7e>
			if (isdigit(readBuf[16]))
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <CURERRDRIVE1+0x84>)
 80009d8:	7c1b      	ldrb	r3, [r3, #16]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <CURERRDRIVE1+0xa4>)
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <CURERRDRIVE1+0x74>
				sscanf(&readBuf[16], "%d", &par.val5); //присвоить новое значение
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <CURERRDRIVE1+0xa8>)
 80009ec:	4912      	ldr	r1, [pc, #72]	@ (8000a38 <CURERRDRIVE1+0xac>)
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <CURERRDRIVE1+0xb0>)
 80009f0:	f003 fa90 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 80009f4:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <CURERRDRIVE1+0xb4>)
 80009f6:	4908      	ldr	r1, [pc, #32]	@ (8000a18 <CURERRDRIVE1+0x8c>)
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <CURERRDRIVE1+0x90>)
 80009fa:	f003 fa6b 	bl	8003ed4 <siprintf>
}
 80009fe:	e004      	b.n	8000a0a <CURERRDRIVE1+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <CURERRDRIVE1+0x94>)
 8000a02:	4905      	ldr	r1, [pc, #20]	@ (8000a18 <CURERRDRIVE1+0x8c>)
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <CURERRDRIVE1+0x90>)
 8000a06:	f003 fa65 	bl	8003ed4 <siprintf>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000008c 	.word	0x2000008c
 8000a14:	080059c4 	.word	0x080059c4
 8000a18:	080058dc 	.word	0x080058dc
 8000a1c:	200000b4 	.word	0x200000b4
 8000a20:	080058e4 	.word	0x080058e4
 8000a24:	20000178 	.word	0x20000178
 8000a28:	08005a00 	.word	0x08005a00
 8000a2c:	080058f4 	.word	0x080058f4
 8000a30:	08005d28 	.word	0x08005d28
 8000a34:	200001a4 	.word	0x200001a4
 8000a38:	080058fc 	.word	0x080058fc
 8000a3c:	2000009c 	.word	0x2000009c
 8000a40:	08005900 	.word	0x08005900

08000a44 <CURERRDRIVE2>:
void CURERRDRIVE2()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	if (readBuf[15] == '?' && readBuf[16] == '\r')//Выдать описание команды
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <CURERRDRIVE2+0x84>)
 8000a4a:	7bdb      	ldrb	r3, [r3, #15]
 8000a4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a4e:	d109      	bne.n	8000a64 <CURERRDRIVE2+0x20>
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <CURERRDRIVE2+0x84>)
 8000a52:	7c1b      	ldrb	r3, [r3, #16]
 8000a54:	2b0d      	cmp	r3, #13
 8000a56:	d105      	bne.n	8000a64 <CURERRDRIVE2+0x20>
		sprintf(writeBuf, "%s\r\n", "Emergency current value of the window 2 drive circuit line");
 8000a58:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <CURERRDRIVE2+0x88>)
 8000a5a:	491d      	ldr	r1, [pc, #116]	@ (8000ad0 <CURERRDRIVE2+0x8c>)
 8000a5c:	481d      	ldr	r0, [pc, #116]	@ (8000ad4 <CURERRDRIVE2+0x90>)
 8000a5e:	f003 fa39 	bl	8003ed4 <siprintf>
 8000a62:	e004      	b.n	8000a6e <CURERRDRIVE2+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000a64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <CURERRDRIVE2+0x94>)
 8000a66:	491a      	ldr	r1, [pc, #104]	@ (8000ad0 <CURERRDRIVE2+0x8c>)
 8000a68:	481a      	ldr	r0, [pc, #104]	@ (8000ad4 <CURERRDRIVE2+0x90>)
 8000a6a:	f003 fa33 	bl	8003ed4 <siprintf>
	if (readBuf[15] == '=')//=
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <CURERRDRIVE2+0x84>)
 8000a70:	7bdb      	ldrb	r3, [r3, #15]
 8000a72:	2b3d      	cmp	r3, #61	@ 0x3d
 8000a74:	d125      	bne.n	8000ac2 <CURERRDRIVE2+0x7e>
	{
		if (readBuf[16] == '?')//=?
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <CURERRDRIVE2+0x84>)
 8000a78:	7c1b      	ldrb	r3, [r3, #16]
 8000a7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a7c:	d107      	bne.n	8000a8e <CURERRDRIVE2+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRDRIVE2:", par.val6);//выдать текущее значение параметра
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <CURERRDRIVE2+0x98>)
 8000a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <CURERRDRIVE2+0x9c>)
 8000a84:	4917      	ldr	r1, [pc, #92]	@ (8000ae4 <CURERRDRIVE2+0xa0>)
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <CURERRDRIVE2+0x90>)
 8000a88:	f003 fa24 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000a8c:	e019      	b.n	8000ac2 <CURERRDRIVE2+0x7e>
			if (isdigit(readBuf[16]))
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <CURERRDRIVE2+0x84>)
 8000a90:	7c1b      	ldrb	r3, [r3, #16]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <CURERRDRIVE2+0xa4>)
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00a      	beq.n	8000ab8 <CURERRDRIVE2+0x74>
				sscanf(&readBuf[16], "%d", &par.val6); //присвоить новое значение
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <CURERRDRIVE2+0xa8>)
 8000aa4:	4912      	ldr	r1, [pc, #72]	@ (8000af0 <CURERRDRIVE2+0xac>)
 8000aa6:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <CURERRDRIVE2+0xb0>)
 8000aa8:	f003 fa34 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000aac:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <CURERRDRIVE2+0xb4>)
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <CURERRDRIVE2+0x8c>)
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <CURERRDRIVE2+0x90>)
 8000ab2:	f003 fa0f 	bl	8003ed4 <siprintf>
}
 8000ab6:	e004      	b.n	8000ac2 <CURERRDRIVE2+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <CURERRDRIVE2+0x94>)
 8000aba:	4905      	ldr	r1, [pc, #20]	@ (8000ad0 <CURERRDRIVE2+0x8c>)
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <CURERRDRIVE2+0x90>)
 8000abe:	f003 fa09 	bl	8003ed4 <siprintf>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	08005a10 	.word	0x08005a10
 8000ad0:	080058dc 	.word	0x080058dc
 8000ad4:	200000b4 	.word	0x200000b4
 8000ad8:	080058e4 	.word	0x080058e4
 8000adc:	20000178 	.word	0x20000178
 8000ae0:	08005a4c 	.word	0x08005a4c
 8000ae4:	080058f4 	.word	0x080058f4
 8000ae8:	08005d28 	.word	0x08005d28
 8000aec:	200001ac 	.word	0x200001ac
 8000af0:	080058fc 	.word	0x080058fc
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	08005900 	.word	0x08005900

08000afc <CURERRDRIVE3>:
void CURERRDRIVE3()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	if (readBuf[15] == '?' && readBuf[16] == '\r')//Выдать описание команды
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <CURERRDRIVE3+0x84>)
 8000b02:	7bdb      	ldrb	r3, [r3, #15]
 8000b04:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b06:	d109      	bne.n	8000b1c <CURERRDRIVE3+0x20>
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <CURERRDRIVE3+0x84>)
 8000b0a:	7c1b      	ldrb	r3, [r3, #16]
 8000b0c:	2b0d      	cmp	r3, #13
 8000b0e:	d105      	bne.n	8000b1c <CURERRDRIVE3+0x20>
		sprintf(writeBuf, "%s\r\n","Emergency current value of the window 3 drive circuit line");
 8000b10:	4a1c      	ldr	r2, [pc, #112]	@ (8000b84 <CURERRDRIVE3+0x88>)
 8000b12:	491d      	ldr	r1, [pc, #116]	@ (8000b88 <CURERRDRIVE3+0x8c>)
 8000b14:	481d      	ldr	r0, [pc, #116]	@ (8000b8c <CURERRDRIVE3+0x90>)
 8000b16:	f003 f9dd 	bl	8003ed4 <siprintf>
 8000b1a:	e004      	b.n	8000b26 <CURERRDRIVE3+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b90 <CURERRDRIVE3+0x94>)
 8000b1e:	491a      	ldr	r1, [pc, #104]	@ (8000b88 <CURERRDRIVE3+0x8c>)
 8000b20:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <CURERRDRIVE3+0x90>)
 8000b22:	f003 f9d7 	bl	8003ed4 <siprintf>
	if (readBuf[15] == '=')//=
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <CURERRDRIVE3+0x84>)
 8000b28:	7bdb      	ldrb	r3, [r3, #15]
 8000b2a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000b2c:	d125      	bne.n	8000b7a <CURERRDRIVE3+0x7e>
	{
		if (readBuf[16] == '?')//=?
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <CURERRDRIVE3+0x84>)
 8000b30:	7c1b      	ldrb	r3, [r3, #16]
 8000b32:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b34:	d107      	bne.n	8000b46 <CURERRDRIVE3+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRDRIVE3:", par.val7); //выдать текущее значение параметра
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <CURERRDRIVE3+0x98>)
 8000b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <CURERRDRIVE3+0x9c>)
 8000b3c:	4917      	ldr	r1, [pc, #92]	@ (8000b9c <CURERRDRIVE3+0xa0>)
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <CURERRDRIVE3+0x90>)
 8000b40:	f003 f9c8 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000b44:	e019      	b.n	8000b7a <CURERRDRIVE3+0x7e>
			if (isdigit(readBuf[16]))
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <CURERRDRIVE3+0x84>)
 8000b48:	7c1b      	ldrb	r3, [r3, #16]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <CURERRDRIVE3+0xa4>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <CURERRDRIVE3+0x74>
				sscanf(&readBuf[16], "%d", &par.val7); //присвоить новое значение
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <CURERRDRIVE3+0xa8>)
 8000b5c:	4912      	ldr	r1, [pc, #72]	@ (8000ba8 <CURERRDRIVE3+0xac>)
 8000b5e:	4813      	ldr	r0, [pc, #76]	@ (8000bac <CURERRDRIVE3+0xb0>)
 8000b60:	f003 f9d8 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000b64:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <CURERRDRIVE3+0xb4>)
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <CURERRDRIVE3+0x8c>)
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <CURERRDRIVE3+0x90>)
 8000b6a:	f003 f9b3 	bl	8003ed4 <siprintf>
}
 8000b6e:	e004      	b.n	8000b7a <CURERRDRIVE3+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <CURERRDRIVE3+0x94>)
 8000b72:	4905      	ldr	r1, [pc, #20]	@ (8000b88 <CURERRDRIVE3+0x8c>)
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <CURERRDRIVE3+0x90>)
 8000b76:	f003 f9ad 	bl	8003ed4 <siprintf>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	08005a5c 	.word	0x08005a5c
 8000b88:	080058dc 	.word	0x080058dc
 8000b8c:	200000b4 	.word	0x200000b4
 8000b90:	080058e4 	.word	0x080058e4
 8000b94:	20000178 	.word	0x20000178
 8000b98:	08005a98 	.word	0x08005a98
 8000b9c:	080058f4 	.word	0x080058f4
 8000ba0:	08005d28 	.word	0x08005d28
 8000ba4:	200001b4 	.word	0x200001b4
 8000ba8:	080058fc 	.word	0x080058fc
 8000bac:	2000009c 	.word	0x2000009c
 8000bb0:	08005900 	.word	0x08005900

08000bb4 <CURERRDRIVE4>:
void CURERRDRIVE4()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	if (readBuf[15] == '?' && readBuf[16] == '\r')     //Выдать описание команды
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <CURERRDRIVE4+0x84>)
 8000bba:	7bdb      	ldrb	r3, [r3, #15]
 8000bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bbe:	d109      	bne.n	8000bd4 <CURERRDRIVE4+0x20>
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <CURERRDRIVE4+0x84>)
 8000bc2:	7c1b      	ldrb	r3, [r3, #16]
 8000bc4:	2b0d      	cmp	r3, #13
 8000bc6:	d105      	bne.n	8000bd4 <CURERRDRIVE4+0x20>
		sprintf(writeBuf, "%s\r\n","Emergency current value of the window 4 drive circuit line");
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <CURERRDRIVE4+0x88>)
 8000bca:	491d      	ldr	r1, [pc, #116]	@ (8000c40 <CURERRDRIVE4+0x8c>)
 8000bcc:	481d      	ldr	r0, [pc, #116]	@ (8000c44 <CURERRDRIVE4+0x90>)
 8000bce:	f003 f981 	bl	8003ed4 <siprintf>
 8000bd2:	e004      	b.n	8000bde <CURERRDRIVE4+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <CURERRDRIVE4+0x94>)
 8000bd6:	491a      	ldr	r1, [pc, #104]	@ (8000c40 <CURERRDRIVE4+0x8c>)
 8000bd8:	481a      	ldr	r0, [pc, #104]	@ (8000c44 <CURERRDRIVE4+0x90>)
 8000bda:	f003 f97b 	bl	8003ed4 <siprintf>
	if (readBuf[15] == '=')//=
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <CURERRDRIVE4+0x84>)
 8000be0:	7bdb      	ldrb	r3, [r3, #15]
 8000be2:	2b3d      	cmp	r3, #61	@ 0x3d
 8000be4:	d125      	bne.n	8000c32 <CURERRDRIVE4+0x7e>
	{
		if (readBuf[16] == '?')//=?
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <CURERRDRIVE4+0x84>)
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bec:	d107      	bne.n	8000bfe <CURERRDRIVE4+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRDRIVE4:", par.val8); //выдать текущее значение параметра
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <CURERRDRIVE4+0x98>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <CURERRDRIVE4+0x9c>)
 8000bf4:	4917      	ldr	r1, [pc, #92]	@ (8000c54 <CURERRDRIVE4+0xa0>)
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <CURERRDRIVE4+0x90>)
 8000bf8:	f003 f96c 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000bfc:	e019      	b.n	8000c32 <CURERRDRIVE4+0x7e>
			if (isdigit(readBuf[16]))
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <CURERRDRIVE4+0x84>)
 8000c00:	7c1b      	ldrb	r3, [r3, #16]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <CURERRDRIVE4+0xa4>)
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <CURERRDRIVE4+0x74>
				sscanf(&readBuf[16], "%d", &par.val8); //присвоить новое значение
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <CURERRDRIVE4+0xa8>)
 8000c14:	4912      	ldr	r1, [pc, #72]	@ (8000c60 <CURERRDRIVE4+0xac>)
 8000c16:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <CURERRDRIVE4+0xb0>)
 8000c18:	f003 f97c 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <CURERRDRIVE4+0xb4>)
 8000c1e:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <CURERRDRIVE4+0x8c>)
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <CURERRDRIVE4+0x90>)
 8000c22:	f003 f957 	bl	8003ed4 <siprintf>
}
 8000c26:	e004      	b.n	8000c32 <CURERRDRIVE4+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <CURERRDRIVE4+0x94>)
 8000c2a:	4905      	ldr	r1, [pc, #20]	@ (8000c40 <CURERRDRIVE4+0x8c>)
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <CURERRDRIVE4+0x90>)
 8000c2e:	f003 f951 	bl	8003ed4 <siprintf>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000008c 	.word	0x2000008c
 8000c3c:	08005aa8 	.word	0x08005aa8
 8000c40:	080058dc 	.word	0x080058dc
 8000c44:	200000b4 	.word	0x200000b4
 8000c48:	080058e4 	.word	0x080058e4
 8000c4c:	20000178 	.word	0x20000178
 8000c50:	08005ae4 	.word	0x08005ae4
 8000c54:	080058f4 	.word	0x080058f4
 8000c58:	08005d28 	.word	0x08005d28
 8000c5c:	200001bc 	.word	0x200001bc
 8000c60:	080058fc 	.word	0x080058fc
 8000c64:	2000009c 	.word	0x2000009c
 8000c68:	08005900 	.word	0x08005900

08000c6c <CURERRTIME>:
void CURERRTIME()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (readBuf[13] == '?' && readBuf[14] == '\r')     //Выдать описание команды
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <CURERRTIME+0x84>)
 8000c72:	7b5b      	ldrb	r3, [r3, #13]
 8000c74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c76:	d109      	bne.n	8000c8c <CURERRTIME+0x20>
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <CURERRTIME+0x84>)
 8000c7a:	7b9b      	ldrb	r3, [r3, #14]
 8000c7c:	2b0d      	cmp	r3, #13
 8000c7e:	d105      	bne.n	8000c8c <CURERRTIME+0x20>
		sprintf(writeBuf, "%s\r\n","The holding time of the emergency current value of the drive circuit line");
 8000c80:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <CURERRTIME+0x88>)
 8000c82:	491d      	ldr	r1, [pc, #116]	@ (8000cf8 <CURERRTIME+0x8c>)
 8000c84:	481d      	ldr	r0, [pc, #116]	@ (8000cfc <CURERRTIME+0x90>)
 8000c86:	f003 f925 	bl	8003ed4 <siprintf>
 8000c8a:	e004      	b.n	8000c96 <CURERRTIME+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d00 <CURERRTIME+0x94>)
 8000c8e:	491a      	ldr	r1, [pc, #104]	@ (8000cf8 <CURERRTIME+0x8c>)
 8000c90:	481a      	ldr	r0, [pc, #104]	@ (8000cfc <CURERRTIME+0x90>)
 8000c92:	f003 f91f 	bl	8003ed4 <siprintf>
	if (readBuf[13] == '=')//=
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <CURERRTIME+0x84>)
 8000c98:	7b5b      	ldrb	r3, [r3, #13]
 8000c9a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000c9c:	d125      	bne.n	8000cea <CURERRTIME+0x7e>
			{
		if (readBuf[14] == '?')//=?
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <CURERRTIME+0x84>)
 8000ca0:	7b9b      	ldrb	r3, [r3, #14]
 8000ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ca4:	d107      	bne.n	8000cb6 <CURERRTIME+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "CURERRTIME:", par.val9); //выдать текущее значение параметра
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <CURERRTIME+0x98>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <CURERRTIME+0x9c>)
 8000cac:	4917      	ldr	r1, [pc, #92]	@ (8000d0c <CURERRTIME+0xa0>)
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <CURERRTIME+0x90>)
 8000cb0:	f003 f910 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000cb4:	e019      	b.n	8000cea <CURERRTIME+0x7e>
			if (isdigit(readBuf[14]))
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <CURERRTIME+0x84>)
 8000cb8:	7b9b      	ldrb	r3, [r3, #14]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <CURERRTIME+0xa4>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00a      	beq.n	8000ce0 <CURERRTIME+0x74>
				sscanf(&readBuf[14], "%d", &par.val9); //присвоить новое значение
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <CURERRTIME+0xa8>)
 8000ccc:	4912      	ldr	r1, [pc, #72]	@ (8000d18 <CURERRTIME+0xac>)
 8000cce:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <CURERRTIME+0xb0>)
 8000cd0:	f003 f920 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000cd4:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <CURERRTIME+0xb4>)
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <CURERRTIME+0x8c>)
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <CURERRTIME+0x90>)
 8000cda:	f003 f8fb 	bl	8003ed4 <siprintf>
}
 8000cde:	e004      	b.n	8000cea <CURERRTIME+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <CURERRTIME+0x94>)
 8000ce2:	4905      	ldr	r1, [pc, #20]	@ (8000cf8 <CURERRTIME+0x8c>)
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <CURERRTIME+0x90>)
 8000ce6:	f003 f8f5 	bl	8003ed4 <siprintf>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	08005af4 	.word	0x08005af4
 8000cf8:	080058dc 	.word	0x080058dc
 8000cfc:	200000b4 	.word	0x200000b4
 8000d00:	080058e4 	.word	0x080058e4
 8000d04:	20000178 	.word	0x20000178
 8000d08:	08005b40 	.word	0x08005b40
 8000d0c:	080058f4 	.word	0x080058f4
 8000d10:	08005d28 	.word	0x08005d28
 8000d14:	200001c4 	.word	0x200001c4
 8000d18:	080058fc 	.word	0x080058fc
 8000d1c:	2000009a 	.word	0x2000009a
 8000d20:	08005900 	.word	0x08005900

08000d24 <STOTIMELOCK>:
void STOTIMELOCK()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if (readBuf[14] == '?' && readBuf[15] == '\r')     //Выдать описание команды
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <STOTIMELOCK+0x84>)
 8000d2a:	7b9b      	ldrb	r3, [r3, #14]
 8000d2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d2e:	d109      	bne.n	8000d44 <STOTIMELOCK+0x20>
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <STOTIMELOCK+0x84>)
 8000d32:	7bdb      	ldrb	r3, [r3, #15]
 8000d34:	2b0d      	cmp	r3, #13
 8000d36:	d105      	bne.n	8000d44 <STOTIMELOCK+0x20>
		sprintf(writeBuf, "%s\r\n", "The time spent in the lock stop");
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <STOTIMELOCK+0x88>)
 8000d3a:	491d      	ldr	r1, [pc, #116]	@ (8000db0 <STOTIMELOCK+0x8c>)
 8000d3c:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <STOTIMELOCK+0x90>)
 8000d3e:	f003 f8c9 	bl	8003ed4 <siprintf>
 8000d42:	e004      	b.n	8000d4e <STOTIMELOCK+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000d44:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <STOTIMELOCK+0x94>)
 8000d46:	491a      	ldr	r1, [pc, #104]	@ (8000db0 <STOTIMELOCK+0x8c>)
 8000d48:	481a      	ldr	r0, [pc, #104]	@ (8000db4 <STOTIMELOCK+0x90>)
 8000d4a:	f003 f8c3 	bl	8003ed4 <siprintf>
	if (readBuf[14] == '=')                //=
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <STOTIMELOCK+0x84>)
 8000d50:	7b9b      	ldrb	r3, [r3, #14]
 8000d52:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d54:	d125      	bne.n	8000da2 <STOTIMELOCK+0x7e>
			{
		if (readBuf[15] == '?')                //=?
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <STOTIMELOCK+0x84>)
 8000d58:	7bdb      	ldrb	r3, [r3, #15]
 8000d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d5c:	d107      	bne.n	8000d6e <STOTIMELOCK+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "STOTIMELOCK:", par.val10); //выдать текущее значение параметра
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <STOTIMELOCK+0x98>)
 8000d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <STOTIMELOCK+0x9c>)
 8000d64:	4917      	ldr	r1, [pc, #92]	@ (8000dc4 <STOTIMELOCK+0xa0>)
 8000d66:	4813      	ldr	r0, [pc, #76]	@ (8000db4 <STOTIMELOCK+0x90>)
 8000d68:	f003 f8b4 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000d6c:	e019      	b.n	8000da2 <STOTIMELOCK+0x7e>
			if (isdigit(readBuf[15]))
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <STOTIMELOCK+0x84>)
 8000d70:	7bdb      	ldrb	r3, [r3, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <STOTIMELOCK+0xa4>)
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00a      	beq.n	8000d98 <STOTIMELOCK+0x74>
				sscanf(&readBuf[15], "%d", &par.val10); //присвоить новое значение
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <STOTIMELOCK+0xa8>)
 8000d84:	4912      	ldr	r1, [pc, #72]	@ (8000dd0 <STOTIMELOCK+0xac>)
 8000d86:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <STOTIMELOCK+0xb0>)
 8000d88:	f003 f8c4 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000d8c:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <STOTIMELOCK+0xb4>)
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <STOTIMELOCK+0x8c>)
 8000d90:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <STOTIMELOCK+0x90>)
 8000d92:	f003 f89f 	bl	8003ed4 <siprintf>
}
 8000d96:	e004      	b.n	8000da2 <STOTIMELOCK+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <STOTIMELOCK+0x94>)
 8000d9a:	4905      	ldr	r1, [pc, #20]	@ (8000db0 <STOTIMELOCK+0x8c>)
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <STOTIMELOCK+0x90>)
 8000d9e:	f003 f899 	bl	8003ed4 <siprintf>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	08005b4c 	.word	0x08005b4c
 8000db0:	080058dc 	.word	0x080058dc
 8000db4:	200000b4 	.word	0x200000b4
 8000db8:	080058e4 	.word	0x080058e4
 8000dbc:	20000178 	.word	0x20000178
 8000dc0:	08005b6c 	.word	0x08005b6c
 8000dc4:	080058f4 	.word	0x080058f4
 8000dc8:	08005d28 	.word	0x08005d28
 8000dcc:	200001cc 	.word	0x200001cc
 8000dd0:	080058fc 	.word	0x080058fc
 8000dd4:	2000009b 	.word	0x2000009b
 8000dd8:	08005900 	.word	0x08005900

08000ddc <STOTIMEDRIVE>:
void STOTIMEDRIVE()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	if (readBuf[15] == '?' && readBuf[16] == '\r')     //Выдать описание команды
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <STOTIMEDRIVE+0x84>)
 8000de2:	7bdb      	ldrb	r3, [r3, #15]
 8000de4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000de6:	d109      	bne.n	8000dfc <STOTIMEDRIVE+0x20>
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <STOTIMEDRIVE+0x84>)
 8000dea:	7c1b      	ldrb	r3, [r3, #16]
 8000dec:	2b0d      	cmp	r3, #13
 8000dee:	d105      	bne.n	8000dfc <STOTIMEDRIVE+0x20>
		sprintf(writeBuf, "%s\r\n", "The time spent in the stop of the chains");
 8000df0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <STOTIMEDRIVE+0x88>)
 8000df2:	491d      	ldr	r1, [pc, #116]	@ (8000e68 <STOTIMEDRIVE+0x8c>)
 8000df4:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <STOTIMEDRIVE+0x90>)
 8000df6:	f003 f86d 	bl	8003ed4 <siprintf>
 8000dfa:	e004      	b.n	8000e06 <STOTIMEDRIVE+0x2a>
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <STOTIMEDRIVE+0x94>)
 8000dfe:	491a      	ldr	r1, [pc, #104]	@ (8000e68 <STOTIMEDRIVE+0x8c>)
 8000e00:	481a      	ldr	r0, [pc, #104]	@ (8000e6c <STOTIMEDRIVE+0x90>)
 8000e02:	f003 f867 	bl	8003ed4 <siprintf>
	if (readBuf[15] == '=')//=
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <STOTIMEDRIVE+0x84>)
 8000e08:	7bdb      	ldrb	r3, [r3, #15]
 8000e0a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000e0c:	d125      	bne.n	8000e5a <STOTIMEDRIVE+0x7e>
			{
		if (readBuf[16] == '?')//=?
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <STOTIMEDRIVE+0x84>)
 8000e10:	7c1b      	ldrb	r3, [r3, #16]
 8000e12:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e14:	d107      	bne.n	8000e26 <STOTIMEDRIVE+0x4a>
			sprintf(writeBuf, "%s %d\r\n", "STOTIMEDRIVE:", par.val11); //выдать текущее значение параметра
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <STOTIMEDRIVE+0x98>)
 8000e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <STOTIMEDRIVE+0x9c>)
 8000e1c:	4917      	ldr	r1, [pc, #92]	@ (8000e7c <STOTIMEDRIVE+0xa0>)
 8000e1e:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <STOTIMEDRIVE+0x90>)
 8000e20:	f003 f858 	bl	8003ed4 <siprintf>
			}
			else
				sprintf(writeBuf, "%s\r\n", "Error");
		}
	}
}
 8000e24:	e019      	b.n	8000e5a <STOTIMEDRIVE+0x7e>
			if (isdigit(readBuf[16]))
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <STOTIMEDRIVE+0x84>)
 8000e28:	7c1b      	ldrb	r3, [r3, #16]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <STOTIMEDRIVE+0xa4>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00a      	beq.n	8000e50 <STOTIMEDRIVE+0x74>
				sscanf(&readBuf[16], "%d", &par.val11); //присвоить новое значение
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <STOTIMEDRIVE+0xa8>)
 8000e3c:	4912      	ldr	r1, [pc, #72]	@ (8000e88 <STOTIMEDRIVE+0xac>)
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <STOTIMEDRIVE+0xb0>)
 8000e40:	f003 f868 	bl	8003f14 <siscanf>
				sprintf(writeBuf, "%s\r\n", "Ok");
 8000e44:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <STOTIMEDRIVE+0xb4>)
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <STOTIMEDRIVE+0x8c>)
 8000e48:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <STOTIMEDRIVE+0x90>)
 8000e4a:	f003 f843 	bl	8003ed4 <siprintf>
}
 8000e4e:	e004      	b.n	8000e5a <STOTIMEDRIVE+0x7e>
				sprintf(writeBuf, "%s\r\n", "Error");
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <STOTIMEDRIVE+0x94>)
 8000e52:	4905      	ldr	r1, [pc, #20]	@ (8000e68 <STOTIMEDRIVE+0x8c>)
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <STOTIMEDRIVE+0x90>)
 8000e56:	f003 f83d 	bl	8003ed4 <siprintf>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	08005b7c 	.word	0x08005b7c
 8000e68:	080058dc 	.word	0x080058dc
 8000e6c:	200000b4 	.word	0x200000b4
 8000e70:	080058e4 	.word	0x080058e4
 8000e74:	20000178 	.word	0x20000178
 8000e78:	08005ba8 	.word	0x08005ba8
 8000e7c:	080058f4 	.word	0x080058f4
 8000e80:	08005d28 	.word	0x08005d28
 8000e84:	200001d4 	.word	0x200001d4
 8000e88:	080058fc 	.word	0x080058fc
 8000e8c:	2000009c 	.word	0x2000009c
 8000e90:	08005900 	.word	0x08005900

08000e94 <SAVEFLASH>:
void SAVEFLASH()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if (readBuf[3] == 'S' && readBuf[12] == '\r')
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <SAVEFLASH+0x38>)
 8000e9a:	78db      	ldrb	r3, [r3, #3]
 8000e9c:	2b53      	cmp	r3, #83	@ 0x53
 8000e9e:	d10c      	bne.n	8000eba <SAVEFLASH+0x26>
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <SAVEFLASH+0x38>)
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b0d      	cmp	r3, #13
 8000ea6:	d108      	bne.n	8000eba <SAVEFLASH+0x26>
	{
		writeFlash(flash_addr);
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <SAVEFLASH+0x3c>)
 8000eaa:	f000 f883 	bl	8000fb4 <writeFlash>
		sprintf(writeBuf, "%s\r\n", " Flash updated!");
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <SAVEFLASH+0x40>)
 8000eb0:	4909      	ldr	r1, [pc, #36]	@ (8000ed8 <SAVEFLASH+0x44>)
 8000eb2:	480a      	ldr	r0, [pc, #40]	@ (8000edc <SAVEFLASH+0x48>)
 8000eb4:	f003 f80e 	bl	8003ed4 <siprintf>
 8000eb8:	e005      	b.n	8000ec6 <SAVEFLASH+0x32>
	}
	else
		sprintf(writeBuf, "%s\r\n", "Error");
 8000eba:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <SAVEFLASH+0x4c>)
 8000ebc:	4906      	ldr	r1, [pc, #24]	@ (8000ed8 <SAVEFLASH+0x44>)
 8000ebe:	4807      	ldr	r0, [pc, #28]	@ (8000edc <SAVEFLASH+0x48>)
 8000ec0:	f003 f808 	bl	8003ed4 <siprintf>

}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	08020000 	.word	0x08020000
 8000ed4:	08005bb8 	.word	0x08005bb8
 8000ed8:	080058dc 	.word	0x080058dc
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	080058e4 	.word	0x080058e4

08000ee4 <READFLASH>:
void READFLASH()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	if (readBuf[3] == 'R' && readBuf[12] == '\r')
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <READFLASH+0xb4>)
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	2b52      	cmp	r3, #82	@ 0x52
 8000ef0:	d147      	bne.n	8000f82 <READFLASH+0x9e>
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <READFLASH+0xb4>)
 8000ef4:	7b1b      	ldrb	r3, [r3, #12]
 8000ef6:	2b0d      	cmp	r3, #13
 8000ef8:	d143      	bne.n	8000f82 <READFLASH+0x9e>
	{
		uint32_t first_byte = readFlash(flash_addr);
 8000efa:	4828      	ldr	r0, [pc, #160]	@ (8000f9c <READFLASH+0xb8>)
 8000efc:	f000 f8aa 	bl	8001054 <readFlash>
 8000f00:	6078      	str	r0, [r7, #4]
		//sprintf(writeBuf, "%X\r\n", first_byte);
		if (first_byte == 0xFFFFFFFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d135      	bne.n	8000f76 <READFLASH+0x92>
		//if (first_byte == 1)
		{
			//sprintf(writeBuf, "%s\r\n", "First_byte==0xFF!");
			par.val0 = byte[0];
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <READFLASH+0xbc>)
 8000f10:	605a      	str	r2, [r3, #4]
			par.val1 = byte[1];
 8000f12:	230b      	movs	r3, #11
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <READFLASH+0xbc>)
 8000f18:	60da      	str	r2, [r3, #12]
			par.val2 = byte[2];
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <READFLASH+0xbc>)
 8000f20:	615a      	str	r2, [r3, #20]
			par.val3 = byte[3];
 8000f22:	230d      	movs	r3, #13
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <READFLASH+0xbc>)
 8000f28:	61da      	str	r2, [r3, #28]
			par.val4 = byte[4];
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <READFLASH+0xbc>)
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
			par.val5 = byte[5];
 8000f32:	230f      	movs	r3, #15
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <READFLASH+0xbc>)
 8000f38:	62da      	str	r2, [r3, #44]	@ 0x2c
			par.val6 = byte[6];
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <READFLASH+0xbc>)
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
			par.val7 = byte[7];
 8000f42:	2311      	movs	r3, #17
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <READFLASH+0xbc>)
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
			par.val8 = byte[8];
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <READFLASH+0xbc>)
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44
			par.val9 = byte[9];
 8000f52:	2313      	movs	r3, #19
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <READFLASH+0xbc>)
 8000f58:	64da      	str	r2, [r3, #76]	@ 0x4c
			par.val10 = byte[10];
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <READFLASH+0xbc>)
 8000f60:	655a      	str	r2, [r3, #84]	@ 0x54
			par.val11 = byte[11];
 8000f62:	2315      	movs	r3, #21
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <READFLASH+0xbc>)
 8000f68:	65da      	str	r2, [r3, #92]	@ 0x5c
			sprintf(writeBuf, "First byte=%X\r\n", first_byte);
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <READFLASH+0xc0>)
 8000f6e:	480e      	ldr	r0, [pc, #56]	@ (8000fa8 <READFLASH+0xc4>)
 8000f70:	f002 ffb0 	bl	8003ed4 <siprintf>
	{
 8000f74:	e00b      	b.n	8000f8e <READFLASH+0xaa>
		}
		else
			sprintf(writeBuf, "First byte=%X\r\n", first_byte);
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	490a      	ldr	r1, [pc, #40]	@ (8000fa4 <READFLASH+0xc0>)
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <READFLASH+0xc4>)
 8000f7c:	f002 ffaa 	bl	8003ed4 <siprintf>
	{
 8000f80:	e005      	b.n	8000f8e <READFLASH+0xaa>
	}
	else
		sprintf(writeBuf, "%s\r\n", "Error!");
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <READFLASH+0xc8>)
 8000f84:	490a      	ldr	r1, [pc, #40]	@ (8000fb0 <READFLASH+0xcc>)
 8000f86:	4808      	ldr	r0, [pc, #32]	@ (8000fa8 <READFLASH+0xc4>)
 8000f88:	f002 ffa4 	bl	8003ed4 <siprintf>
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	08020000 	.word	0x08020000
 8000fa0:	20000178 	.word	0x20000178
 8000fa4:	08005bc8 	.word	0x08005bc8
 8000fa8:	200000b4 	.word	0x200000b4
 8000fac:	08005bd8 	.word	0x08005bd8
 8000fb0:	080058dc 	.word	0x080058dc

08000fb4 <writeFlash>:
uint8_t writeFlash(uint32_t addr)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint32_t structureSize = sizeof(par);// замеряем размер структуры
 8000fbc:	2360      	movs	r3, #96	@ 0x60
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
	FLASH_EraseInitTypeDef FlashErase; // переменная для структуры, которая выполняет функцию стирания страницы
	uint32_t pageError = 0; // переменная для записи информации об ошибках в процессе стирания
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]

	//__disable_irq();// запрещаем прерывания
	HAL_FLASH_Unlock();//разблокировка FLASH
 8000fc4:	f000 fdec 	bl	8001ba0 <HAL_FLASH_Unlock>
	FlashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
	FlashErase.NbSectors = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
	FlashErase.Sector = FLASH_SECTOR_5;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	617b      	str	r3, [r7, #20]
	FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
	if (HAL_FLASHEx_Erase(&FlashErase, &pageError) != HAL_OK)// вызов функции стирания
 8000fd8:	f107 0208 	add.w	r2, r7, #8
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff4e 	bl	8001e84 <HAL_FLASHEx_Erase>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <writeFlash+0x42>
	{
		HAL_FLASH_Lock(); // если не смог стереть, то закрыть память и вернуть ошибку
 8000fee:	f000 fdf9 	bl	8001be4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e028      	b.n	8001048 <writeFlash+0x94>
	}
	uint32_t *dataPtr = (uint32_t*) &par; // создаем указатель на нашу структуру и записываем ее кусочками по 32 бита
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <writeFlash+0x9c>)
 8000ff8:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < structureSize / 4; i++)// 4 байта = 32 бита
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ffe:	e01a      	b.n	8001036 <writeFlash+0x82>
	{
		status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, dataPtr[i]);
 8001000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	6a3a      	ldr	r2, [r7, #32]
 8001006:	4413      	add	r3, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	461c      	mov	r4, r3
 800100e:	4615      	mov	r5, r2
 8001010:	4622      	mov	r2, r4
 8001012:	462b      	mov	r3, r5
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	2002      	movs	r0, #2
 8001018:	f000 fd6e 	bl	8001af8 <HAL_FLASH_Program>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001024:	4413      	add	r3, r2
 8001026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		addr += 4;// сдвигаем адрес на 4 байта
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < structureSize / 4; i++)// 4 байта = 32 бита
 8001030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001032:	3301      	adds	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	089a      	lsrs	r2, r3, #2
 800103a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103c:	429a      	cmp	r2, r3
 800103e:	d8df      	bhi.n	8001000 <writeFlash+0x4c>
		//status += HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr, dataPtr[i]);//не работает
		//addr ++;// побайтово
	}
	//__enable_irq();// включаем прерывания обратно
	HAL_FLASH_Lock();
 8001040:	f000 fdd0 	bl	8001be4 <HAL_FLASH_Lock>
	return status;
 8001044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	20000178 	.word	0x20000178

08001054 <readFlash>:
uint32_t readFlash(uint32_t addr)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	 for (int i = 0; i < structureSize / 4; i++)
	 {
	 dataPtr[i] = *(__IO uint32_t*)addr;
	 addr += 4;
	 }*/
	return (*(__IO uint32_t*) addr);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fb2c 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f8b0 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f938 	bl	80012ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800107c:	f000 f90c 	bl	8001298 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2025      	movs	r0, #37	@ 0x25
 8001086:	f000 fc6e 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108a:	2025      	movs	r0, #37	@ 0x25
 800108c:	f000 fc87 	bl	800199e <HAL_NVIC_EnableIRQ>
  par.num0=1;//№ параметра
 8001090:	4b4a      	ldr	r3, [pc, #296]	@ (80011bc <main+0x150>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]
  par.num1=2;
 8001096:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <main+0x150>)
 8001098:	2202      	movs	r2, #2
 800109a:	609a      	str	r2, [r3, #8]
  par.num2=3;
 800109c:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <main+0x150>)
 800109e:	2203      	movs	r2, #3
 80010a0:	611a      	str	r2, [r3, #16]
  par.num3=4;
 80010a2:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <main+0x150>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	619a      	str	r2, [r3, #24]
  par.num4=5;
 80010a8:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <main+0x150>)
 80010aa:	2205      	movs	r2, #5
 80010ac:	621a      	str	r2, [r3, #32]
  par.num5=6;
 80010ae:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <main+0x150>)
 80010b0:	2206      	movs	r2, #6
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  par.num6=7;
 80010b4:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <main+0x150>)
 80010b6:	2207      	movs	r2, #7
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30
  par.num7=8;
 80010ba:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <main+0x150>)
 80010bc:	2208      	movs	r2, #8
 80010be:	639a      	str	r2, [r3, #56]	@ 0x38
  par.num8=9;
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <main+0x150>)
 80010c2:	2209      	movs	r2, #9
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
  par.num9=10;
 80010c6:	4b3d      	ldr	r3, [pc, #244]	@ (80011bc <main+0x150>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	649a      	str	r2, [r3, #72]	@ 0x48
  par.num10=11;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <main+0x150>)
 80010ce:	220b      	movs	r2, #11
 80010d0:	651a      	str	r2, [r3, #80]	@ 0x50
  par.num11=12;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	@ (80011bc <main+0x150>)
 80010d4:	220c      	movs	r2, #12
 80010d6:	659a      	str	r2, [r3, #88]	@ 0x58
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &rxbyte, 1);//вызов приёма, подготовка к приёму
 80010d8:	2201      	movs	r2, #1
 80010da:	4939      	ldr	r1, [pc, #228]	@ (80011c0 <main+0x154>)
 80010dc:	4839      	ldr	r0, [pc, #228]	@ (80011c4 <main+0x158>)
 80010de:	f001 feaa 	bl	8002e36 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (flag==1)
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <main+0x15c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d1fa      	bne.n	80010e2 <main+0x76>
	  {
		  switch (check())
 80010ec:	f7ff fa48 	bl	8000580 <check>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b0d      	cmp	r3, #13
 80010f4:	d848      	bhi.n	8001188 <main+0x11c>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <main+0x90>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001135 	.word	0x08001135
 8001100:	0800113b 	.word	0x0800113b
 8001104:	08001141 	.word	0x08001141
 8001108:	08001147 	.word	0x08001147
 800110c:	0800114d 	.word	0x0800114d
 8001110:	08001153 	.word	0x08001153
 8001114:	08001159 	.word	0x08001159
 8001118:	0800115f 	.word	0x0800115f
 800111c:	08001165 	.word	0x08001165
 8001120:	0800116b 	.word	0x0800116b
 8001124:	08001171 	.word	0x08001171
 8001128:	08001177 	.word	0x08001177
 800112c:	0800117d 	.word	0x0800117d
 8001130:	08001183 	.word	0x08001183
	      {
	      	  case 0:
	      		  //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	      		  SPD();//скорость соединения
 8001134:	f7ff fa5e 	bl	80005f4 <SPD>
	      		  break;
 8001138:	e02c      	b.n	8001194 <main+0x128>
	          case 1:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               LNOPEN();//расстояние полного открытия
 800113a:	f7ff fab7 	bl	80006ac <LNOPEN>
	               break;
 800113e:	e029      	b.n	8001194 <main+0x128>
	          case 2:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               LNHLOPEN();//расстояние неполного открытия
 8001140:	f7ff fb10 	bl	8000764 <LNHLOPEN>
	               break;
 8001144:	e026      	b.n	8001194 <main+0x128>
	          case 3:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRLOCK1();//аварийное значение токо линии замков 1
 8001146:	f7ff fb69 	bl	800081c <CURERRLOCK1>
	               break;
 800114a:	e023      	b.n	8001194 <main+0x128>
	          case 4:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRLOCK2();//аварийное значение токо линии замков 2
 800114c:	f7ff fbc2 	bl	80008d4 <CURERRLOCK2>
	               break;
 8001150:	e020      	b.n	8001194 <main+0x128>
	          case 5:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRDRIVE1();//аварийное значение  тока линии цепей привода окна 1
 8001152:	f7ff fc1b 	bl	800098c <CURERRDRIVE1>
	               break;
 8001156:	e01d      	b.n	8001194 <main+0x128>
	          case 6:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRDRIVE2();//аварийное значение  тока линии цепей привода окна 2
 8001158:	f7ff fc74 	bl	8000a44 <CURERRDRIVE2>
	               break;
 800115c:	e01a      	b.n	8001194 <main+0x128>
	          case 7:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRDRIVE3();//аварийное значение  тока линии цепей привода окна 3
 800115e:	f7ff fccd 	bl	8000afc <CURERRDRIVE3>
	               break;
 8001162:	e017      	b.n	8001194 <main+0x128>
	          case 8:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRDRIVE4();//аварийное значение  тока линии цепей привода окна 4
 8001164:	f7ff fd26 	bl	8000bb4 <CURERRDRIVE4>
	               break;
 8001168:	e014      	b.n	8001194 <main+0x128>
	          case 9:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               CURERRTIME();//время удержания аварийного значения  тока линии цепей
 800116a:	f7ff fd7f 	bl	8000c6c <CURERRTIME>
	               break;
 800116e:	e011      	b.n	8001194 <main+0x128>
	          case 10:
	               //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	               STOTIMELOCK();//время нахождения в упоре замков
 8001170:	f7ff fdd8 	bl	8000d24 <STOTIMELOCK>
	               break;
 8001174:	e00e      	b.n	8001194 <main+0x128>
	          case 11:
	        	  //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	              STOTIMEDRIVE();//время нахождения в упоре цепей
 8001176:	f7ff fe31 	bl	8000ddc <STOTIMEDRIVE>
	              break;
 800117a:	e00b      	b.n	8001194 <main+0x128>
	          case 12:
	        	  //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	              SAVEFLASH();//сохранить всё во flash
 800117c:	f7ff fe8a 	bl	8000e94 <SAVEFLASH>
	              break;
 8001180:	e008      	b.n	8001194 <main+0x128>
	          case 13:
	        	  //sprintf(writeBuf, "%s", readBuf);//передаём в массив writeBuf
	              READFLASH();//"холодный старт"
 8001182:	f7ff feaf 	bl	8000ee4 <READFLASH>
	              break;
 8001186:	e005      	b.n	8001194 <main+0x128>
	          default:
	              sprintf(writeBuf, "%s", "Error\r\n");//передаём в массив writeBuf
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <main+0x160>)
 800118a:	4911      	ldr	r1, [pc, #68]	@ (80011d0 <main+0x164>)
 800118c:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <main+0x168>)
 800118e:	f002 fea1 	bl	8003ed4 <siprintf>
	              break;
 8001192:	bf00      	nop
	      }
	           	 flag=0;//сбрасываем флаг
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <main+0x15c>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	             HAL_UART_Transmit(&huart1, (uint8_t*)writeBuf, strlen(writeBuf), HAL_MAX_DELAY);
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <main+0x168>)
 800119c:	f7ff f820 	bl	80001e0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	490a      	ldr	r1, [pc, #40]	@ (80011d4 <main+0x168>)
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <main+0x158>)
 80011ac:	f001 fdb8 	bl	8002d20 <HAL_UART_Transmit>
	             HAL_UART_Receive_IT(&huart1, &rxbyte, 1);//вызов приёма, подготовка к приёму
 80011b0:	2201      	movs	r2, #1
 80011b2:	4903      	ldr	r1, [pc, #12]	@ (80011c0 <main+0x154>)
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <main+0x158>)
 80011b6:	f001 fe3e 	bl	8002e36 <HAL_UART_Receive_IT>
	  if (flag==1)
 80011ba:	e792      	b.n	80010e2 <main+0x76>
 80011bc:	20000178 	.word	0x20000178
 80011c0:	2000012c 	.word	0x2000012c
 80011c4:	20000130 	.word	0x20000130
 80011c8:	20000088 	.word	0x20000088
 80011cc:	08005be0 	.word	0x08005be0
 80011d0:	08005be8 	.word	0x08005be8
 80011d4:	200000b4 	.word	0x200000b4

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	@ 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 ff03 	bl	8003ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <SystemClock_Config+0xb8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <SystemClock_Config+0xb8>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <SystemClock_Config+0xb8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <SystemClock_Config+0xbc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <SystemClock_Config+0xbc>)
 8001226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <SystemClock_Config+0xbc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f8bf 	bl	80023d0 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001258:	f000 f8a0 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fb22 	bl	80028c0 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001282:	f000 f88b 	bl	800139c <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	@ 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_USART1_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012d0:	f001 fcd6 	bl	8002c80 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f85f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000130 	.word	0x20000130
 80012e8:	40011000 	.word	0x40011000

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_GPIO_Init+0x30>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <MX_GPIO_Init+0x30>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_GPIO_Init+0x30>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Установить флаг передачи: передача завершена */
     // UartReady = SET;
      readBuf[i++]=rxbyte;//принимаем побайтно
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	b2d1      	uxtb	r1, r2
 8001330:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 8001332:	7011      	strb	r1, [r2, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_UART_RxCpltCallback+0x6c>)
 8001338:	7819      	ldrb	r1, [r3, #0]
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_UART_RxCpltCallback+0x70>)
 800133c:	5499      	strb	r1, [r3, r2]
      if (i >= sizeof(readBuf)) //если буфер переполнился
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b27      	cmp	r3, #39	@ 0x27
 8001344:	d902      	bls.n	800134c <HAL_UART_RxCpltCallback+0x2c>
          i=0;//сбрасываем счётчик
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
      if (rxbyte=='\n') //если принятый байт символ перевода каретки
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_UART_RxCpltCallback+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b0a      	cmp	r3, #10
 8001352:	d110      	bne.n	8001376 <HAL_UART_RxCpltCallback+0x56>
      {
          readBuf[i++] = '\0';//добавляем символ конца строки
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	b2d1      	uxtb	r1, r2
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 800135e:	7011      	strb	r1, [r2, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_UART_RxCpltCallback+0x70>)
 8001364:	2100      	movs	r1, #0
 8001366:	5499      	strb	r1, [r3, r2]
          flag = 1; //устанавливаем флаг
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_UART_RxCpltCallback+0x74>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
          i=0;//сбрасываем счётчик
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_UART_RxCpltCallback+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
          //HAL_UART_AbortReceive(&huart1);//прекращение приёма из UART
      }
      else
          HAL_UART_Receive_IT(&huart1, &rxbyte, 1);//вызов приёма, подготовка к приёму
}
 8001374:	e004      	b.n	8001380 <HAL_UART_RxCpltCallback+0x60>
          HAL_UART_Receive_IT(&huart1, &rxbyte, 1);//вызов приёма, подготовка к приёму
 8001376:	2201      	movs	r2, #1
 8001378:	4904      	ldr	r1, [pc, #16]	@ (800138c <HAL_UART_RxCpltCallback+0x6c>)
 800137a:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_UART_RxCpltCallback+0x78>)
 800137c:	f001 fd5b 	bl	8002e36 <HAL_UART_Receive_IT>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000012d 	.word	0x2000012d
 800138c:	2000012c 	.word	0x2000012c
 8001390:	2000008c 	.word	0x2000008c
 8001394:	20000088 	.word	0x20000088
 8001398:	20000130 	.word	0x20000130

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART1) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_UART_MspInit+0x94>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d134      	bne.n	8001484 <HAL_UART_MspInit+0x8c>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <HAL_UART_MspInit+0x98>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_UART_MspInit+0x98>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_UART_MspInit+0x98>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_UART_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <HAL_UART_MspInit+0x98>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_UART_MspInit+0x98>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001452:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001456:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <HAL_UART_MspInit+0x9c>)
 8001470:	f000 fe2a 	bl	80020c8 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2025      	movs	r0, #37	@ 0x25
 800147a:	f000 fa74 	bl	8001966 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147e:	2025      	movs	r0, #37	@ 0x25
 8001480:	f000 fa8d 	bl	800199e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40011000 	.word	0x40011000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <NMI_Handler+0x4>

080014a0 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <MemManage_Handler+0x4>

080014b0 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <UsageFault_Handler+0x4>

080014c0 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80014ee:	f000 f93f 	bl	8001770 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USART1_IRQHandler+0x10>)
 80014fe:	f001 fcbf 	bl	8002e80 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000130 	.word	0x20000130

0800150c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00a      	b.n	8001534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151e:	f3af 8000 	nop.w
 8001522:	4601      	mov	r1, r0
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	b2ca      	uxtb	r2, r1
 800152c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf0      	blt.n	800151e <_read+0x12>
  }

  return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e009      	b.n	800156c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf1      	blt.n	8001558 <_write+0x12>
  }
  return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_close>:

int _close(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a6:	605a      	str	r2, [r3, #4]
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_isatty>:

int _isatty(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f002 fd50 	bl	80040bc <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20018000 	.word	0x20018000
 8001648:	00000400 	.word	0x00000400
 800164c:	200001d8 	.word	0x200001d8
 8001650:	20000350 	.word	0x20000350

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f002 fd0f 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fcdf 	bl	800106c <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016bc:	08005e88 	.word	0x08005e88
  ldr r2, =_sbss
 80016c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016c4:	2000034c 	.word	0x2000034c

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f92b 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fe52 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f943 	bl	80019ba <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 f90b 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000004 	.word	0x20000004
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000000c 	.word	0x2000000c
 8001794:	200001dc 	.word	0x200001dc

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200001dc 	.word	0x200001dc

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	@ (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff feda 	bl	8001798 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d008      	beq.n	8001a04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e052      	b.n	8001aaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0216 	bic.w	r2, r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_DMA_Abort+0x62>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0208 	bic.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a54:	e013      	b.n	8001a7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a56:	f7ff fe9f 	bl	8001798 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d90c      	bls.n	8001a7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e015      	b.n	8001aaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e4      	bne.n	8001a56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a90:	223f      	movs	r2, #63	@ 0x3f
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e00c      	b.n	8001aea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b0a:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <HAL_FLASH_Program+0xa0>)
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_FLASH_Program+0x1e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e03b      	b.n	8001b8e <HAL_FLASH_Program+0x96>
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_FLASH_Program+0xa0>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b20:	f000 f870 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d12b      	bne.n	8001b86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b34:	783b      	ldrb	r3, [r7, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f000 f91b 	bl	8001d74 <FLASH_Program_Byte>
 8001b3e:	e016      	b.n	8001b6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b46:	883b      	ldrh	r3, [r7, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f000 f8ee 	bl	8001d2c <FLASH_Program_HalfWord>
 8001b50:	e00d      	b.n	8001b6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d105      	bne.n	8001b64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	68b8      	ldr	r0, [r7, #8]
 8001b5e:	f000 f8c3 	bl	8001ce8 <FLASH_Program_Word>
 8001b62:	e004      	b.n	8001b6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f88b 	bl	8001c84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b6e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b72:	f000 f847 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001b76:	4603      	mov	r3, r0
 8001b78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_FLASH_Program+0xa4>)
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_FLASH_Program+0xa4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <HAL_FLASH_Program+0xa0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001e0 	.word	0x200001e0
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_FLASH_Unlock+0x38>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da0b      	bge.n	8001bca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_FLASH_Unlock+0x38>)
 8001bb4:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_FLASH_Unlock+0x3c>)
 8001bb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_FLASH_Unlock+0x38>)
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_FLASH_Unlock+0x40>)
 8001bbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_FLASH_Unlock+0x38>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da01      	bge.n	8001bca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bca:	79fb      	ldrb	r3, [r7, #7]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	45670123 	.word	0x45670123
 8001be0:	cdef89ab 	.word	0xcdef89ab

08001be4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_FLASH_Lock+0x1c>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_FLASH_Lock+0x1c>)
 8001bee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bf2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <FLASH_WaitForLastOperation+0x78>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c16:	f7ff fdbf 	bl	8001798 <HAL_GetTick>
 8001c1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c1c:	e010      	b.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d00c      	beq.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <FLASH_WaitForLastOperation+0x38>
 8001c2c:	f7ff fdb4 	bl	8001798 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d201      	bcs.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e019      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c6a:	f000 f8a5 	bl	8001db8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
  
}  
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200001e0 	.word	0x200001e0
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001ca2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <FLASH_Program_DoubleWord+0x60>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001cba:	f3bf 8f6f 	isb	sy
}
 8001cbe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	000a      	movs	r2, r1
 8001cce:	2300      	movs	r3, #0
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	3104      	adds	r1, #4
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001d04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <FLASH_Program_Word+0x40>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <FLASH_Program_HalfWord+0x44>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <FLASH_Program_Byte+0x40>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	701a      	strb	r2, [r3, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001dd2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	4a24      	ldr	r2, [pc, #144]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001df0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001df2:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001df4:	2220      	movs	r2, #32
 8001df6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e12:	2240      	movs	r2, #64	@ 0x40
 8001e14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	4a15      	ldr	r2, [pc, #84]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e2c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e30:	2280      	movs	r2, #128	@ 0x80
 8001e32:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e52:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <FLASH_SetErrorCode+0xc8>)
 8001e6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <FLASH_SetErrorCode+0xc4>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	60da      	str	r2, [r3, #12]
  }
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40023c00 	.word	0x40023c00
 8001e80:	200001e0 	.word	0x200001e0

08001e84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_FLASHEx_Erase+0xd8>)
 8001e98:	7e1b      	ldrb	r3, [r3, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_FLASHEx_Erase+0x1e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e058      	b.n	8001f54 <HAL_FLASHEx_Erase+0xd0>
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <HAL_FLASHEx_Erase+0xd8>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ea8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001eac:	f7ff feaa 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d148      	bne.n	8001f4c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d115      	bne.n	8001ef6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f000 f844 	bl	8001f64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001edc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ee0:	f7ff fe90 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_FLASHEx_Erase+0xdc>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	@ (8001f60 <HAL_FLASHEx_Erase+0xdc>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6113      	str	r3, [r2, #16]
 8001ef4:	e028      	b.n	8001f48 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	e01c      	b.n	8001f38 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	f000 f850 	bl	8001fac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f10:	f7ff fe78 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_FLASHEx_Erase+0xdc>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_FLASHEx_Erase+0xdc>)
 8001f1e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001f22:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	601a      	str	r2, [r3, #0]
          break;
 8001f30:	e00a      	b.n	8001f48 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3da      	bcc.n	8001efe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f48:	f000 f878 	bl	800203c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_FLASHEx_Erase+0xd8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	761a      	strb	r2, [r3, #24]

  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200001e0 	.word	0x200001e0
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	4313      	orrs	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <FLASH_MassErase+0x44>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6113      	str	r3, [r2, #16]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e010      	b.n	8001fea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d103      	bne.n	8001fd6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e009      	b.n	8001fea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d103      	bne.n	8001fe4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e002      	b.n	8001fea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fe4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	490f      	ldr	r1, [pc, #60]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8002008:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800200c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4313      	orrs	r3, r2
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <FLASH_Erase_Sector+0x8c>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202a:	6113      	str	r3, [r2, #16]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40023c00 	.word	0x40023c00

0800203c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002048:	2b00      	cmp	r3, #0
 800204a:	d017      	beq.n	800207c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002052:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002056:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800205e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800206a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800206e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800207a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d017      	beq.n	80020b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800208e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002092:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 80020a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <FLASH_FlushCaches+0x88>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b6:	6013      	str	r3, [r2, #0]
  }
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e159      	b.n	8002398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8148 	bne.w	8002392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80a2 	beq.w	8002392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b57      	ldr	r3, [pc, #348]	@ (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	4a56      	ldr	r2, [pc, #344]	@ (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800225c:	6453      	str	r3, [r2, #68]	@ 0x44
 800225e:	4b54      	ldr	r3, [pc, #336]	@ (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_GPIO_Init+0x2ec>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a49      	ldr	r2, [pc, #292]	@ (80023b8 <HAL_GPIO_Init+0x2f0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x202>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a48      	ldr	r2, [pc, #288]	@ (80023bc <HAL_GPIO_Init+0x2f4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x1fe>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a47      	ldr	r2, [pc, #284]	@ (80023c0 <HAL_GPIO_Init+0x2f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a46      	ldr	r2, [pc, #280]	@ (80023c4 <HAL_GPIO_Init+0x2fc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x1f6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a45      	ldr	r2, [pc, #276]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x1f2>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022ca:	2300      	movs	r3, #0
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022dc:	4935      	ldr	r1, [pc, #212]	@ (80023b4 <HAL_GPIO_Init+0x2ec>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ea:	4b38      	ldr	r3, [pc, #224]	@ (80023cc <HAL_GPIO_Init+0x304>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230e:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <HAL_GPIO_Init+0x304>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_GPIO_Init+0x304>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002338:	4a24      	ldr	r2, [pc, #144]	@ (80023cc <HAL_GPIO_Init+0x304>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_GPIO_Init+0x304>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002362:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_GPIO_Init+0x304>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_GPIO_Init+0x304>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800238c:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <HAL_GPIO_Init+0x304>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	f67f aea2 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e267      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	4b88      	ldr	r3, [pc, #544]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b85      	ldr	r3, [pc, #532]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d112      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b82      	ldr	r3, [pc, #520]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b7e      	ldr	r3, [pc, #504]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e242      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b76      	ldr	r3, [pc, #472]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6f      	ldr	r2, [pc, #444]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6d      	ldr	r3, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6c      	ldr	r2, [pc, #432]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b69      	ldr	r3, [pc, #420]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b66      	ldr	r3, [pc, #408]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff f986 	bl	8001798 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f982 	bl	8001798 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e207      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f972 	bl	8001798 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f96e 	bl	8001798 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c7      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	@ (8002614 <HAL_RCC_OscConfig+0x244>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff f927 	bl	8001798 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff f923 	bl	8001798 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a8      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_RCC_OscConfig+0x244>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff f906 	bl	8001798 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff f902 	bl	8001798 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e187      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_RCC_OscConfig+0x248>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff f8e6 	bl	8001798 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff f8e2 	bl	8001798 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e167      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_RCC_OscConfig+0x240>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_OscConfig+0x248>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f8cf 	bl	8001798 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff f8cb 	bl	8001798 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e150      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b81      	ldr	r3, [pc, #516]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7d      	ldr	r3, [pc, #500]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	4a7c      	ldr	r2, [pc, #496]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40
 8002656:	4b7a      	ldr	r3, [pc, #488]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b77      	ldr	r3, [pc, #476]	@ (8002844 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b74      	ldr	r3, [pc, #464]	@ (8002844 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	@ (8002844 <HAL_RCC_OscConfig+0x474>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff f88b 	bl	8001798 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff f887 	bl	8001798 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e10c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6a      	ldr	r3, [pc, #424]	@ (8002844 <HAL_RCC_OscConfig+0x474>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ea>
 80026ac:	4b64      	ldr	r3, [pc, #400]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x30c>
 80026c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026dc:	4b58      	ldr	r3, [pc, #352]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	4a57      	ldr	r2, [pc, #348]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e8:	4b55      	ldr	r3, [pc, #340]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	4a54      	ldr	r2, [pc, #336]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff f84c 	bl	8001798 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff f848 	bl	8001798 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b49      	ldr	r3, [pc, #292]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x334>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff f836 	bl	8001798 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff f832 	bl	8001798 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b5      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b39      	ldr	r3, [pc, #228]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	4a38      	ldr	r2, [pc, #224]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d05c      	beq.n	8002834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d141      	bne.n	8002806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f806 	bl	8001798 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff f802 	bl	8001798 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e087      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	491b      	ldr	r1, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x478>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe ffdb 	bl	8001798 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe ffd7 	bl	8001798 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x416>
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe ffc4 	bl	8001798 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ffc0 	bl	8001798 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e045      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d028      	beq.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d121      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fef2 	bl	8001798 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe feee 	bl	8001798 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fe52 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08005d10 	.word	0x08005d10
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b090      	sub	sp, #64	@ 0x40
 8002a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d00d      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x40>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	f200 80a1 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002abe:	e09b      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b53      	ldr	r3, [pc, #332]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ac4:	e09b      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4b53      	ldr	r3, [pc, #332]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aca:	e098      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	2200      	movs	r2, #0
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002af4:	2100      	movs	r1, #0
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af8:	fb03 f201 	mul.w	r2, r3, r1
 8002afc:	2300      	movs	r3, #0
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	4a43      	ldr	r2, [pc, #268]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b06:	fba0 1202 	umull	r1, r2, r0, r2
 8002b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b12:	4413      	add	r3, r2
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	61fa      	str	r2, [r7, #28]
 8002b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b26:	f7fd fbb3 	bl	8000290 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b32:	e053      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	617a      	str	r2, [r7, #20]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b46:	f04f 0b00 	mov.w	fp, #0
 8002b4a:	4652      	mov	r2, sl
 8002b4c:	465b      	mov	r3, fp
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	ebb2 080a 	subs.w	r8, r2, sl
 8002b66:	eb63 090b 	sbc.w	r9, r3, fp
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b82:	eb63 0509 	sbc.w	r5, r3, r9
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	00eb      	lsls	r3, r5, #3
 8002b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b94:	00e2      	lsls	r2, r4, #3
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	eb14 030a 	adds.w	r3, r4, sl
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	eb45 030b 	adc.w	r3, r5, fp
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	f7fd fb5e 	bl	8000290 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002bec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3740      	adds	r7, #64	@ 0x40
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	00f42400 	.word	0x00f42400
 8002c14:	017d7840 	.word	0x017d7840

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08005d20 	.word	0x08005d20

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffdc 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0b5b      	lsrs	r3, r3, #13
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	@ (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08005d20 	.word	0x08005d20

08002c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e042      	b.n	8002d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fba6 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	@ 0x24
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fdbd 	bl	8003844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d175      	bne.n	8002e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_UART_Transmit+0x2c>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e06e      	b.n	8002e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2221      	movs	r2, #33	@ 0x21
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fd1b 	bl	8001798 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d78:	d108      	bne.n	8002d8c <HAL_UART_Transmit+0x6c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	e003      	b.n	8002d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d94:	e02e      	b.n	8002df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fb1f 	bl	80033e4 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e03a      	b.n	8002e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e007      	b.n	8002de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1cb      	bne.n	8002d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2140      	movs	r1, #64	@ 0x40
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 faeb 	bl	80033e4 <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d112      	bne.n	8002e76 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_UART_Receive_IT+0x26>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e00b      	b.n	8002e78 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb12 	bl	8003496 <UART_Start_Receive_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	e000      	b.n	8002e78 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0ba      	sub	sp, #232	@ 0xe8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x66>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fbf2 	bl	80036c8 <UART_Receive_IT>
      return;
 8002ee4:	e25b      	b.n	800339e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80de 	beq.w	80030ac <HAL_UART_IRQHandler+0x22c>
 8002ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80d1 	beq.w	80030ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_UART_IRQHandler+0xae>
 8002f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_UART_IRQHandler+0xd2>
 8002f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_UART_IRQHandler+0xf6>
 8002f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f043 0204 	orr.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d011      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x126>
 8002f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f043 0208 	orr.w	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 81f2 	beq.w	8003394 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_UART_IRQHandler+0x14e>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb7d 	bl	80036c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_UART_IRQHandler+0x17a>
 8002ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04f      	beq.n	800309a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa85 	bl	800350a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d141      	bne.n	8003092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800302c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3314      	adds	r3, #20
 8003036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800303a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800303e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1d9      	bne.n	800300e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d013      	beq.n	800308a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	4a7e      	ldr	r2, [pc, #504]	@ (8003260 <HAL_UART_IRQHandler+0x3e0>)
 8003068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fd1f 	bl	8001ab2 <HAL_DMA_Abort_IT>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003084:	4610      	mov	r0, r2
 8003086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e00e      	b.n	80030a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f994 	bl	80033b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e00a      	b.n	80030a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f990 	bl	80033b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	e006      	b.n	80030a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f98c 	bl	80033b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030a6:	e175      	b.n	8003394 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	bf00      	nop
    return;
 80030aa:	e173      	b.n	8003394 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 814f 	bne.w	8003354 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8148 	beq.w	8003354 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8141 	beq.w	8003354 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f2:	2b40      	cmp	r3, #64	@ 0x40
 80030f4:	f040 80b6 	bne.w	8003264 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8145 	beq.w	8003398 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003116:	429a      	cmp	r2, r3
 8003118:	f080 813e 	bcs.w	8003398 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312e:	f000 8088 	beq.w	8003242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800315e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800316a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1d9      	bne.n	8003132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800318e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e1      	bne.n	800317e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3314      	adds	r3, #20
 80031da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e3      	bne.n	80031ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800322a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e3      	bne.n	8003200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fbc8 	bl	80019d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003250:	b29b      	uxth	r3, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8b7 	bl	80033cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800325e:	e09b      	b.n	8003398 <HAL_UART_IRQHandler+0x518>
 8003260:	080035d1 	.word	0x080035d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 808e 	beq.w	800339c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8089 	beq.w	800339c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80032b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	623b      	str	r3, [r7, #32]
   return(result);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	60fb      	str	r3, [r7, #12]
   return(result);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	69b9      	ldr	r1, [r7, #24]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	617b      	str	r3, [r7, #20]
   return(result);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e3      	bne.n	8003308 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f83d 	bl	80033cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003352:	e023      	b.n	800339c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_UART_IRQHandler+0x4f4>
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f943 	bl	80035f8 <UART_Transmit_IT>
    return;
 8003372:	e014      	b.n	800339e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <HAL_UART_IRQHandler+0x51e>
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f983 	bl	8003698 <UART_EndTransmit_IT>
    return;
 8003392:	e004      	b.n	800339e <HAL_UART_IRQHandler+0x51e>
    return;
 8003394:	bf00      	nop
 8003396:	e002      	b.n	800339e <HAL_UART_IRQHandler+0x51e>
      return;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_UART_IRQHandler+0x51e>
      return;
 800339c:	bf00      	nop
  }
}
 800339e:	37e8      	adds	r7, #232	@ 0xe8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f4:	e03b      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d037      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7fe f9cb 	bl	8001798 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <UART_WaitOnFlagUntilTimeout+0x30>
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e03a      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d023      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b80      	cmp	r3, #128	@ 0x80
 800342a:	d020      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b40      	cmp	r3, #64	@ 0x40
 8003430:	d01d      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d116      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f857 	bl	800350a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2208      	movs	r2, #8
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d0b4      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2222      	movs	r2, #34	@ 0x22
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0220 	orr.w	r2, r2, #32
 80034fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b095      	sub	sp, #84	@ 0x54
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003532:	643a      	str	r2, [r7, #64]	@ 0x40
 8003534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	61fb      	str	r3, [r7, #28]
   return(result);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800356c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	2b01      	cmp	r3, #1
 8003580:	d119      	bne.n	80035b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	60bb      	str	r3, [r7, #8]
   return(result);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 0310 	bic.w	r3, r3, #16
 8003598:	647b      	str	r3, [r7, #68]	@ 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a2:	61ba      	str	r2, [r7, #24]
 80035a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	613b      	str	r3, [r7, #16]
   return(result);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e5      	bne.n	8003582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035c4:	bf00      	nop
 80035c6:	3754      	adds	r7, #84	@ 0x54
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff fee4 	bl	80033b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b21      	cmp	r3, #33	@ 0x21
 800360a:	d13e      	bne.n	800368a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003614:	d114      	bne.n	8003640 <UART_Transmit_IT+0x48>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d110      	bne.n	8003640 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003632:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]
 800363e:	e008      	b.n	8003652 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	1c59      	adds	r1, r3, #1
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6211      	str	r1, [r2, #32]
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29b      	uxth	r3, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4619      	mov	r1, r3
 8003660:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003674:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003684:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fe73 	bl	80033a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	@ 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b22      	cmp	r3, #34	@ 0x22
 80036da:	f040 80ae 	bne.w	800383a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e6:	d117      	bne.n	8003718 <UART_Receive_IT+0x50>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	b29a      	uxth	r2, r3
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
 8003716:	e026      	b.n	8003766 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	d007      	beq.n	800373c <UART_Receive_IT+0x74>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <UART_Receive_IT+0x82>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e008      	b.n	800375c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003756:	b2da      	uxtb	r2, r3
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29b      	uxth	r3, r3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003776:	2b00      	cmp	r3, #0
 8003778:	d15d      	bne.n	8003836 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0220 	bic.w	r2, r2, #32
 8003788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d135      	bne.n	800382c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	613b      	str	r3, [r7, #16]
   return(result);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f023 0310 	bic.w	r3, r3, #16
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	623a      	str	r2, [r7, #32]
 80037e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b10      	cmp	r3, #16
 8003806:	d10a      	bne.n	800381e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fdd1 	bl	80033cc <HAL_UARTEx_RxEventCallback>
 800382a:	e002      	b.n	8003832 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fd fd77 	bl	8001320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e002      	b.n	800383c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	@ 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b0c0      	sub	sp, #256	@ 0x100
 800384a:	af00      	add	r7, sp, #0
 800384c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	ea40 0301 	orr.w	r3, r0, r1
 800386c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800389c:	f021 010c 	bic.w	r1, r1, #12
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038aa:	430b      	orrs	r3, r1
 80038ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	6999      	ldr	r1, [r3, #24]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	ea40 0301 	orr.w	r3, r0, r1
 80038ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003b10 <UART_SetConfig+0x2cc>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d005      	beq.n	80038e4 <UART_SetConfig+0xa0>
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b8d      	ldr	r3, [pc, #564]	@ (8003b14 <UART_SetConfig+0x2d0>)
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d104      	bne.n	80038ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7ff f9b8 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 80038e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038ec:	e003      	b.n	80038f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ee:	f7ff f99f 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80038f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	f040 810c 	bne.w	8003b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800390e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	1891      	adds	r1, r2, r2
 800391c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800391e:	415b      	adcs	r3, r3
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003926:	4621      	mov	r1, r4
 8003928:	eb12 0801 	adds.w	r8, r2, r1
 800392c:	4629      	mov	r1, r5
 800392e:	eb43 0901 	adc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003954:	462b      	mov	r3, r5
 8003956:	eb49 0303 	adc.w	r3, r9, r3
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800396a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800396e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003972:	460b      	mov	r3, r1
 8003974:	18db      	adds	r3, r3, r3
 8003976:	653b      	str	r3, [r7, #80]	@ 0x50
 8003978:	4613      	mov	r3, r2
 800397a:	eb42 0303 	adc.w	r3, r2, r3
 800397e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003988:	f7fc fc82 	bl	8000290 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b61      	ldr	r3, [pc, #388]	@ (8003b18 <UART_SetConfig+0x2d4>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039b4:	415b      	adcs	r3, r3
 80039b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039bc:	4641      	mov	r1, r8
 80039be:	eb12 0a01 	adds.w	sl, r2, r1
 80039c2:	4649      	mov	r1, r9
 80039c4:	eb43 0b01 	adc.w	fp, r3, r1
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039dc:	4692      	mov	sl, r2
 80039de:	469b      	mov	fp, r3
 80039e0:	4643      	mov	r3, r8
 80039e2:	eb1a 0303 	adds.w	r3, sl, r3
 80039e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb4b 0303 	adc.w	r3, fp, r3
 80039f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	18db      	adds	r3, r3, r3
 8003a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0e:	4613      	mov	r3, r2
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a1e:	f7fc fc37 	bl	8000290 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	4b3b      	ldr	r3, [pc, #236]	@ (8003b18 <UART_SetConfig+0x2d4>)
 8003a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2264      	movs	r2, #100	@ 0x64
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	1acb      	subs	r3, r1, r3
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a3e:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <UART_SetConfig+0x2d4>)
 8003a40:	fba3 2302 	umull	r2, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a4c:	441c      	add	r4, r3
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a70:	4641      	mov	r1, r8
 8003a72:	1851      	adds	r1, r2, r1
 8003a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a76:	4649      	mov	r1, r9
 8003a78:	414b      	adcs	r3, r1
 8003a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a88:	4659      	mov	r1, fp
 8003a8a:	00cb      	lsls	r3, r1, #3
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a92:	4651      	mov	r1, sl
 8003a94:	00ca      	lsls	r2, r1, #3
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	18db      	adds	r3, r3, r3
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aca:	4613      	mov	r3, r2
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ada:	f7fc fbd9 	bl	8000290 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	@ 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3332      	adds	r3, #50	@ 0x32
 8003af6:	4a08      	ldr	r2, [pc, #32]	@ (8003b18 <UART_SetConfig+0x2d4>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 0207 	and.w	r2, r3, #7
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4422      	add	r2, r4
 8003b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b0c:	e106      	b.n	8003d1c <UART_SetConfig+0x4d8>
 8003b0e:	bf00      	nop
 8003b10:	40011000 	.word	0x40011000
 8003b14:	40011400 	.word	0x40011400
 8003b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b2e:	4642      	mov	r2, r8
 8003b30:	464b      	mov	r3, r9
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	6239      	str	r1, [r7, #32]
 8003b36:	415b      	adcs	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3e:	4641      	mov	r1, r8
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	4649      	mov	r1, r9
 8003b44:	eb43 0501 	adc.w	r5, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b64:	464b      	mov	r3, r9
 8003b66:	eb45 0303 	adc.w	r3, r5, r3
 8003b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b94:	4621      	mov	r1, r4
 8003b96:	008a      	lsls	r2, r1, #2
 8003b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b9c:	f7fc fb78 	bl	8000290 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b60      	ldr	r3, [pc, #384]	@ (8003d28 <UART_SetConfig+0x4e4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	61b9      	str	r1, [r7, #24]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6139      	str	r1, [r7, #16]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c04:	464b      	mov	r3, r9
 8003c06:	460a      	mov	r2, r1
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c3a:	f7fc fb29 	bl	8000290 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	4b38      	ldr	r3, [pc, #224]	@ (8003d28 <UART_SetConfig+0x4e4>)
 8003c46:	fba3 2301 	umull	r2, r3, r3, r1
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2264      	movs	r2, #100	@ 0x64
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	1acb      	subs	r3, r1, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	@ 0x32
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <UART_SetConfig+0x4e4>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c64:	441c      	add	r4, r3
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c84:	4641      	mov	r1, r8
 8003c86:	1851      	adds	r1, r2, r1
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	414b      	adcs	r3, r1
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	00cb      	lsls	r3, r1, #3
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	00ca      	lsls	r2, r1, #3
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	460a      	mov	r2, r1
 8003cba:	eb42 0303 	adc.w	r3, r2, r3
 8003cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cd8:	4649      	mov	r1, r9
 8003cda:	008b      	lsls	r3, r1, #2
 8003cdc:	4641      	mov	r1, r8
 8003cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	008a      	lsls	r2, r1, #2
 8003ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cea:	f7fc fad1 	bl	8000290 <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <UART_SetConfig+0x4e4>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	@ 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	3332      	adds	r3, #50	@ 0x32
 8003d06:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <UART_SetConfig+0x4e4>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	f003 020f 	and.w	r2, r3, #15
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4422      	add	r2, r4
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d22:	46bd      	mov	sp, r7
 8003d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d28:	51eb851f 	.word	0x51eb851f

08003d2c <std>:
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
 8003d32:	e9c0 3300 	strd	r3, r3, [r0]
 8003d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d3a:	6083      	str	r3, [r0, #8]
 8003d3c:	8181      	strh	r1, [r0, #12]
 8003d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d40:	81c2      	strh	r2, [r0, #14]
 8003d42:	6183      	str	r3, [r0, #24]
 8003d44:	4619      	mov	r1, r3
 8003d46:	2208      	movs	r2, #8
 8003d48:	305c      	adds	r0, #92	@ 0x5c
 8003d4a:	f000 f952 	bl	8003ff2 <memset>
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <std+0x58>)
 8003d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <std+0x5c>)
 8003d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <std+0x60>)
 8003d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <std+0x64>)
 8003d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <std+0x68>)
 8003d60:	6224      	str	r4, [r4, #32]
 8003d62:	429c      	cmp	r4, r3
 8003d64:	d006      	beq.n	8003d74 <std+0x48>
 8003d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d6a:	4294      	cmp	r4, r2
 8003d6c:	d002      	beq.n	8003d74 <std+0x48>
 8003d6e:	33d0      	adds	r3, #208	@ 0xd0
 8003d70:	429c      	cmp	r4, r3
 8003d72:	d105      	bne.n	8003d80 <std+0x54>
 8003d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d7c:	f000 b9c8 	b.w	8004110 <__retarget_lock_init_recursive>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	bf00      	nop
 8003d84:	08003f69 	.word	0x08003f69
 8003d88:	08003f8f 	.word	0x08003f8f
 8003d8c:	08003fc7 	.word	0x08003fc7
 8003d90:	08003feb 	.word	0x08003feb
 8003d94:	20000200 	.word	0x20000200

08003d98 <stdio_exit_handler>:
 8003d98:	4a02      	ldr	r2, [pc, #8]	@ (8003da4 <stdio_exit_handler+0xc>)
 8003d9a:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <stdio_exit_handler+0x10>)
 8003d9c:	4803      	ldr	r0, [pc, #12]	@ (8003dac <stdio_exit_handler+0x14>)
 8003d9e:	f000 b869 	b.w	8003e74 <_fwalk_sglue>
 8003da2:	bf00      	nop
 8003da4:	20000010 	.word	0x20000010
 8003da8:	08005295 	.word	0x08005295
 8003dac:	20000020 	.word	0x20000020

08003db0 <cleanup_stdio>:
 8003db0:	6841      	ldr	r1, [r0, #4]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <cleanup_stdio+0x34>)
 8003db4:	4299      	cmp	r1, r3
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	d001      	beq.n	8003dc0 <cleanup_stdio+0x10>
 8003dbc:	f001 fa6a 	bl	8005294 <_fflush_r>
 8003dc0:	68a1      	ldr	r1, [r4, #8]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <cleanup_stdio+0x38>)
 8003dc4:	4299      	cmp	r1, r3
 8003dc6:	d002      	beq.n	8003dce <cleanup_stdio+0x1e>
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f001 fa63 	bl	8005294 <_fflush_r>
 8003dce:	68e1      	ldr	r1, [r4, #12]
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <cleanup_stdio+0x3c>)
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	d004      	beq.n	8003de0 <cleanup_stdio+0x30>
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ddc:	f001 ba5a 	b.w	8005294 <_fflush_r>
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	bf00      	nop
 8003de4:	20000200 	.word	0x20000200
 8003de8:	20000268 	.word	0x20000268
 8003dec:	200002d0 	.word	0x200002d0

08003df0 <global_stdio_init.part.0>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <global_stdio_init.part.0+0x30>)
 8003df4:	4c0b      	ldr	r4, [pc, #44]	@ (8003e24 <global_stdio_init.part.0+0x34>)
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <global_stdio_init.part.0+0x38>)
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2104      	movs	r1, #4
 8003e00:	f7ff ff94 	bl	8003d2c <std>
 8003e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e08:	2201      	movs	r2, #1
 8003e0a:	2109      	movs	r1, #9
 8003e0c:	f7ff ff8e 	bl	8003d2c <std>
 8003e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e14:	2202      	movs	r2, #2
 8003e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	f7ff bf86 	b.w	8003d2c <std>
 8003e20:	20000338 	.word	0x20000338
 8003e24:	20000200 	.word	0x20000200
 8003e28:	08003d99 	.word	0x08003d99

08003e2c <__sfp_lock_acquire>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	@ (8003e34 <__sfp_lock_acquire+0x8>)
 8003e2e:	f000 b970 	b.w	8004112 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	20000341 	.word	0x20000341

08003e38 <__sfp_lock_release>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__sfp_lock_release+0x8>)
 8003e3a:	f000 b96b 	b.w	8004114 <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	20000341 	.word	0x20000341

08003e44 <__sinit>:
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4604      	mov	r4, r0
 8003e48:	f7ff fff0 	bl	8003e2c <__sfp_lock_acquire>
 8003e4c:	6a23      	ldr	r3, [r4, #32]
 8003e4e:	b11b      	cbz	r3, 8003e58 <__sinit+0x14>
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f7ff bff0 	b.w	8003e38 <__sfp_lock_release>
 8003e58:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <__sinit+0x28>)
 8003e5a:	6223      	str	r3, [r4, #32]
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <__sinit+0x2c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f5      	bne.n	8003e50 <__sinit+0xc>
 8003e64:	f7ff ffc4 	bl	8003df0 <global_stdio_init.part.0>
 8003e68:	e7f2      	b.n	8003e50 <__sinit+0xc>
 8003e6a:	bf00      	nop
 8003e6c:	08003db1 	.word	0x08003db1
 8003e70:	20000338 	.word	0x20000338

08003e74 <_fwalk_sglue>:
 8003e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e78:	4607      	mov	r7, r0
 8003e7a:	4688      	mov	r8, r1
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e84:	f1b9 0901 	subs.w	r9, r9, #1
 8003e88:	d505      	bpl.n	8003e96 <_fwalk_sglue+0x22>
 8003e8a:	6824      	ldr	r4, [r4, #0]
 8003e8c:	2c00      	cmp	r4, #0
 8003e8e:	d1f7      	bne.n	8003e80 <_fwalk_sglue+0xc>
 8003e90:	4630      	mov	r0, r6
 8003e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e96:	89ab      	ldrh	r3, [r5, #12]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d907      	bls.n	8003eac <_fwalk_sglue+0x38>
 8003e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	d003      	beq.n	8003eac <_fwalk_sglue+0x38>
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c0      	blx	r8
 8003eaa:	4306      	orrs	r6, r0
 8003eac:	3568      	adds	r5, #104	@ 0x68
 8003eae:	e7e9      	b.n	8003e84 <_fwalk_sglue+0x10>

08003eb0 <iprintf>:
 8003eb0:	b40f      	push	{r0, r1, r2, r3}
 8003eb2:	b507      	push	{r0, r1, r2, lr}
 8003eb4:	4906      	ldr	r1, [pc, #24]	@ (8003ed0 <iprintf+0x20>)
 8003eb6:	ab04      	add	r3, sp, #16
 8003eb8:	6808      	ldr	r0, [r1, #0]
 8003eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ebe:	6881      	ldr	r1, [r0, #8]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	f000 fd6f 	bl	80049a4 <_vfiprintf_r>
 8003ec6:	b003      	add	sp, #12
 8003ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ecc:	b004      	add	sp, #16
 8003ece:	4770      	bx	lr
 8003ed0:	2000001c 	.word	0x2000001c

08003ed4 <siprintf>:
 8003ed4:	b40e      	push	{r1, r2, r3}
 8003ed6:	b500      	push	{lr}
 8003ed8:	b09c      	sub	sp, #112	@ 0x70
 8003eda:	ab1d      	add	r3, sp, #116	@ 0x74
 8003edc:	9002      	str	r0, [sp, #8]
 8003ede:	9006      	str	r0, [sp, #24]
 8003ee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ee4:	4809      	ldr	r0, [pc, #36]	@ (8003f0c <siprintf+0x38>)
 8003ee6:	9107      	str	r1, [sp, #28]
 8003ee8:	9104      	str	r1, [sp, #16]
 8003eea:	4909      	ldr	r1, [pc, #36]	@ (8003f10 <siprintf+0x3c>)
 8003eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef0:	9105      	str	r1, [sp, #20]
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	a902      	add	r1, sp, #8
 8003ef8:	f000 fa62 	bl	80043c0 <_svfiprintf_r>
 8003efc:	9b02      	ldr	r3, [sp, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	b01c      	add	sp, #112	@ 0x70
 8003f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f08:	b003      	add	sp, #12
 8003f0a:	4770      	bx	lr
 8003f0c:	2000001c 	.word	0x2000001c
 8003f10:	ffff0208 	.word	0xffff0208

08003f14 <siscanf>:
 8003f14:	b40e      	push	{r1, r2, r3}
 8003f16:	b530      	push	{r4, r5, lr}
 8003f18:	b09c      	sub	sp, #112	@ 0x70
 8003f1a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003f1c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003f20:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f24:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003f28:	9002      	str	r0, [sp, #8]
 8003f2a:	9006      	str	r0, [sp, #24]
 8003f2c:	f7fc f958 	bl	80001e0 <strlen>
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <siscanf+0x4c>)
 8003f32:	9003      	str	r0, [sp, #12]
 8003f34:	9007      	str	r0, [sp, #28]
 8003f36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f38:	480a      	ldr	r0, [pc, #40]	@ (8003f64 <siscanf+0x50>)
 8003f3a:	9401      	str	r4, [sp, #4]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f40:	9314      	str	r3, [sp, #80]	@ 0x50
 8003f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f4a:	462a      	mov	r2, r5
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	a902      	add	r1, sp, #8
 8003f50:	6800      	ldr	r0, [r0, #0]
 8003f52:	f000 fb89 	bl	8004668 <__ssvfiscanf_r>
 8003f56:	b01c      	add	sp, #112	@ 0x70
 8003f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f5c:	b003      	add	sp, #12
 8003f5e:	4770      	bx	lr
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	2000001c 	.word	0x2000001c

08003f68 <__sread>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f880 	bl	8004074 <_read_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	bfab      	itete	ge
 8003f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f7c:	181b      	addge	r3, r3, r0
 8003f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f82:	bfac      	ite	ge
 8003f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f86:	81a3      	strhlt	r3, [r4, #12]
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <__seofread>:
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	4770      	bx	lr

08003f8e <__swrite>:
 8003f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f92:	461f      	mov	r7, r3
 8003f94:	898b      	ldrh	r3, [r1, #12]
 8003f96:	05db      	lsls	r3, r3, #23
 8003f98:	4605      	mov	r5, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	d505      	bpl.n	8003fac <__swrite+0x1e>
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f000 f852 	bl	8004050 <_lseek_r>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	4632      	mov	r2, r6
 8003fba:	463b      	mov	r3, r7
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	f000 b869 	b.w	8004098 <_write_r>

08003fc6 <__sseek>:
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	460c      	mov	r4, r1
 8003fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fce:	f000 f83f 	bl	8004050 <_lseek_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	bf15      	itete	ne
 8003fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fe2:	81a3      	strheq	r3, [r4, #12]
 8003fe4:	bf18      	it	ne
 8003fe6:	81a3      	strhne	r3, [r4, #12]
 8003fe8:	bd10      	pop	{r4, pc}

08003fea <__sclose>:
 8003fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fee:	f000 b81f 	b.w	8004030 <_close_r>

08003ff2 <memset>:
 8003ff2:	4402      	add	r2, r0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d100      	bne.n	8003ffc <memset+0xa>
 8003ffa:	4770      	bx	lr
 8003ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8004000:	e7f9      	b.n	8003ff6 <memset+0x4>

08004002 <strstr>:
 8004002:	780a      	ldrb	r2, [r1, #0]
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	b96a      	cbnz	r2, 8004024 <strstr+0x22>
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	429a      	cmp	r2, r3
 800400c:	d109      	bne.n	8004022 <strstr+0x20>
 800400e:	460c      	mov	r4, r1
 8004010:	4605      	mov	r5, r0
 8004012:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f6      	beq.n	8004008 <strstr+0x6>
 800401a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800401e:	429e      	cmp	r6, r3
 8004020:	d0f7      	beq.n	8004012 <strstr+0x10>
 8004022:	3001      	adds	r0, #1
 8004024:	7803      	ldrb	r3, [r0, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <strstr+0x8>
 800402a:	4618      	mov	r0, r3
 800402c:	e7ec      	b.n	8004008 <strstr+0x6>
	...

08004030 <_close_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	@ (800404c <_close_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fd fa9f 	bl	800157e <_close>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_close_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_close_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	2000033c 	.word	0x2000033c

08004050 <_lseek_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	@ (8004070 <_lseek_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fd fab4 	bl	80015cc <_lseek>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_lseek_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_lseek_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000033c 	.word	0x2000033c

08004074 <_read_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d07      	ldr	r5, [pc, #28]	@ (8004094 <_read_r+0x20>)
 8004078:	4604      	mov	r4, r0
 800407a:	4608      	mov	r0, r1
 800407c:	4611      	mov	r1, r2
 800407e:	2200      	movs	r2, #0
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f7fd fa42 	bl	800150c <_read>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_read_r+0x1e>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_read_r+0x1e>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	2000033c 	.word	0x2000033c

08004098 <_write_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d07      	ldr	r5, [pc, #28]	@ (80040b8 <_write_r+0x20>)
 800409c:	4604      	mov	r4, r0
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	602a      	str	r2, [r5, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7fd fa4d 	bl	8001546 <_write>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_write_r+0x1e>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_write_r+0x1e>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	2000033c 	.word	0x2000033c

080040bc <__errno>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	@ (80040c4 <__errno+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000001c 	.word	0x2000001c

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004100 <__libc_init_array+0x38>)
 80040cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004104 <__libc_init_array+0x3c>)
 80040ce:	1b64      	subs	r4, r4, r5
 80040d0:	10a4      	asrs	r4, r4, #2
 80040d2:	2600      	movs	r6, #0
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004108 <__libc_init_array+0x40>)
 80040da:	4c0c      	ldr	r4, [pc, #48]	@ (800410c <__libc_init_array+0x44>)
 80040dc:	f001 fbe8 	bl	80058b0 <_init>
 80040e0:	1b64      	subs	r4, r4, r5
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	2600      	movs	r6, #0
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f0:	4798      	blx	r3
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fa:	4798      	blx	r3
 80040fc:	3601      	adds	r6, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	08005e80 	.word	0x08005e80
 8004104:	08005e80 	.word	0x08005e80
 8004108:	08005e80 	.word	0x08005e80
 800410c:	08005e84 	.word	0x08005e84

08004110 <__retarget_lock_init_recursive>:
 8004110:	4770      	bx	lr

08004112 <__retarget_lock_acquire_recursive>:
 8004112:	4770      	bx	lr

08004114 <__retarget_lock_release_recursive>:
 8004114:	4770      	bx	lr
	...

08004118 <_free_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4605      	mov	r5, r0
 800411c:	2900      	cmp	r1, #0
 800411e:	d041      	beq.n	80041a4 <_free_r+0x8c>
 8004120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004124:	1f0c      	subs	r4, r1, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	18e4      	addlt	r4, r4, r3
 800412c:	f000 f8e0 	bl	80042f0 <__malloc_lock>
 8004130:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <_free_r+0x90>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	b933      	cbnz	r3, 8004144 <_free_r+0x2c>
 8004136:	6063      	str	r3, [r4, #4]
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	4628      	mov	r0, r5
 800413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004140:	f000 b8dc 	b.w	80042fc <__malloc_unlock>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d908      	bls.n	800415a <_free_r+0x42>
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	1821      	adds	r1, r4, r0
 800414c:	428b      	cmp	r3, r1
 800414e:	bf01      	itttt	eq
 8004150:	6819      	ldreq	r1, [r3, #0]
 8004152:	685b      	ldreq	r3, [r3, #4]
 8004154:	1809      	addeq	r1, r1, r0
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	e7ed      	b.n	8004136 <_free_r+0x1e>
 800415a:	461a      	mov	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b10b      	cbz	r3, 8004164 <_free_r+0x4c>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d9fa      	bls.n	800415a <_free_r+0x42>
 8004164:	6811      	ldr	r1, [r2, #0]
 8004166:	1850      	adds	r0, r2, r1
 8004168:	42a0      	cmp	r0, r4
 800416a:	d10b      	bne.n	8004184 <_free_r+0x6c>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	4401      	add	r1, r0
 8004170:	1850      	adds	r0, r2, r1
 8004172:	4283      	cmp	r3, r0
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	d1e0      	bne.n	800413a <_free_r+0x22>
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	4408      	add	r0, r1
 8004180:	6010      	str	r0, [r2, #0]
 8004182:	e7da      	b.n	800413a <_free_r+0x22>
 8004184:	d902      	bls.n	800418c <_free_r+0x74>
 8004186:	230c      	movs	r3, #12
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	e7d6      	b.n	800413a <_free_r+0x22>
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	1821      	adds	r1, r4, r0
 8004190:	428b      	cmp	r3, r1
 8004192:	bf04      	itt	eq
 8004194:	6819      	ldreq	r1, [r3, #0]
 8004196:	685b      	ldreq	r3, [r3, #4]
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	bf04      	itt	eq
 800419c:	1809      	addeq	r1, r1, r0
 800419e:	6021      	streq	r1, [r4, #0]
 80041a0:	6054      	str	r4, [r2, #4]
 80041a2:	e7ca      	b.n	800413a <_free_r+0x22>
 80041a4:	bd38      	pop	{r3, r4, r5, pc}
 80041a6:	bf00      	nop
 80041a8:	20000348 	.word	0x20000348

080041ac <sbrk_aligned>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4e0f      	ldr	r6, [pc, #60]	@ (80041ec <sbrk_aligned+0x40>)
 80041b0:	460c      	mov	r4, r1
 80041b2:	6831      	ldr	r1, [r6, #0]
 80041b4:	4605      	mov	r5, r0
 80041b6:	b911      	cbnz	r1, 80041be <sbrk_aligned+0x12>
 80041b8:	f001 f9b6 	bl	8005528 <_sbrk_r>
 80041bc:	6030      	str	r0, [r6, #0]
 80041be:	4621      	mov	r1, r4
 80041c0:	4628      	mov	r0, r5
 80041c2:	f001 f9b1 	bl	8005528 <_sbrk_r>
 80041c6:	1c43      	adds	r3, r0, #1
 80041c8:	d103      	bne.n	80041d2 <sbrk_aligned+0x26>
 80041ca:	f04f 34ff 	mov.w	r4, #4294967295
 80041ce:	4620      	mov	r0, r4
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	1cc4      	adds	r4, r0, #3
 80041d4:	f024 0403 	bic.w	r4, r4, #3
 80041d8:	42a0      	cmp	r0, r4
 80041da:	d0f8      	beq.n	80041ce <sbrk_aligned+0x22>
 80041dc:	1a21      	subs	r1, r4, r0
 80041de:	4628      	mov	r0, r5
 80041e0:	f001 f9a2 	bl	8005528 <_sbrk_r>
 80041e4:	3001      	adds	r0, #1
 80041e6:	d1f2      	bne.n	80041ce <sbrk_aligned+0x22>
 80041e8:	e7ef      	b.n	80041ca <sbrk_aligned+0x1e>
 80041ea:	bf00      	nop
 80041ec:	20000344 	.word	0x20000344

080041f0 <_malloc_r>:
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	1ccd      	adds	r5, r1, #3
 80041f6:	f025 0503 	bic.w	r5, r5, #3
 80041fa:	3508      	adds	r5, #8
 80041fc:	2d0c      	cmp	r5, #12
 80041fe:	bf38      	it	cc
 8004200:	250c      	movcc	r5, #12
 8004202:	2d00      	cmp	r5, #0
 8004204:	4606      	mov	r6, r0
 8004206:	db01      	blt.n	800420c <_malloc_r+0x1c>
 8004208:	42a9      	cmp	r1, r5
 800420a:	d904      	bls.n	8004216 <_malloc_r+0x26>
 800420c:	230c      	movs	r3, #12
 800420e:	6033      	str	r3, [r6, #0]
 8004210:	2000      	movs	r0, #0
 8004212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042ec <_malloc_r+0xfc>
 800421a:	f000 f869 	bl	80042f0 <__malloc_lock>
 800421e:	f8d8 3000 	ldr.w	r3, [r8]
 8004222:	461c      	mov	r4, r3
 8004224:	bb44      	cbnz	r4, 8004278 <_malloc_r+0x88>
 8004226:	4629      	mov	r1, r5
 8004228:	4630      	mov	r0, r6
 800422a:	f7ff ffbf 	bl	80041ac <sbrk_aligned>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	4604      	mov	r4, r0
 8004232:	d158      	bne.n	80042e6 <_malloc_r+0xf6>
 8004234:	f8d8 4000 	ldr.w	r4, [r8]
 8004238:	4627      	mov	r7, r4
 800423a:	2f00      	cmp	r7, #0
 800423c:	d143      	bne.n	80042c6 <_malloc_r+0xd6>
 800423e:	2c00      	cmp	r4, #0
 8004240:	d04b      	beq.n	80042da <_malloc_r+0xea>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	4639      	mov	r1, r7
 8004246:	4630      	mov	r0, r6
 8004248:	eb04 0903 	add.w	r9, r4, r3
 800424c:	f001 f96c 	bl	8005528 <_sbrk_r>
 8004250:	4581      	cmp	r9, r0
 8004252:	d142      	bne.n	80042da <_malloc_r+0xea>
 8004254:	6821      	ldr	r1, [r4, #0]
 8004256:	1a6d      	subs	r5, r5, r1
 8004258:	4629      	mov	r1, r5
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff ffa6 	bl	80041ac <sbrk_aligned>
 8004260:	3001      	adds	r0, #1
 8004262:	d03a      	beq.n	80042da <_malloc_r+0xea>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	442b      	add	r3, r5
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	f8d8 3000 	ldr.w	r3, [r8]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	bb62      	cbnz	r2, 80042cc <_malloc_r+0xdc>
 8004272:	f8c8 7000 	str.w	r7, [r8]
 8004276:	e00f      	b.n	8004298 <_malloc_r+0xa8>
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	1b52      	subs	r2, r2, r5
 800427c:	d420      	bmi.n	80042c0 <_malloc_r+0xd0>
 800427e:	2a0b      	cmp	r2, #11
 8004280:	d917      	bls.n	80042b2 <_malloc_r+0xc2>
 8004282:	1961      	adds	r1, r4, r5
 8004284:	42a3      	cmp	r3, r4
 8004286:	6025      	str	r5, [r4, #0]
 8004288:	bf18      	it	ne
 800428a:	6059      	strne	r1, [r3, #4]
 800428c:	6863      	ldr	r3, [r4, #4]
 800428e:	bf08      	it	eq
 8004290:	f8c8 1000 	streq.w	r1, [r8]
 8004294:	5162      	str	r2, [r4, r5]
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	4630      	mov	r0, r6
 800429a:	f000 f82f 	bl	80042fc <__malloc_unlock>
 800429e:	f104 000b 	add.w	r0, r4, #11
 80042a2:	1d23      	adds	r3, r4, #4
 80042a4:	f020 0007 	bic.w	r0, r0, #7
 80042a8:	1ac2      	subs	r2, r0, r3
 80042aa:	bf1c      	itt	ne
 80042ac:	1a1b      	subne	r3, r3, r0
 80042ae:	50a3      	strne	r3, [r4, r2]
 80042b0:	e7af      	b.n	8004212 <_malloc_r+0x22>
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	bf0c      	ite	eq
 80042b8:	f8c8 2000 	streq.w	r2, [r8]
 80042bc:	605a      	strne	r2, [r3, #4]
 80042be:	e7eb      	b.n	8004298 <_malloc_r+0xa8>
 80042c0:	4623      	mov	r3, r4
 80042c2:	6864      	ldr	r4, [r4, #4]
 80042c4:	e7ae      	b.n	8004224 <_malloc_r+0x34>
 80042c6:	463c      	mov	r4, r7
 80042c8:	687f      	ldr	r7, [r7, #4]
 80042ca:	e7b6      	b.n	800423a <_malloc_r+0x4a>
 80042cc:	461a      	mov	r2, r3
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	42a3      	cmp	r3, r4
 80042d2:	d1fb      	bne.n	80042cc <_malloc_r+0xdc>
 80042d4:	2300      	movs	r3, #0
 80042d6:	6053      	str	r3, [r2, #4]
 80042d8:	e7de      	b.n	8004298 <_malloc_r+0xa8>
 80042da:	230c      	movs	r3, #12
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 f80c 	bl	80042fc <__malloc_unlock>
 80042e4:	e794      	b.n	8004210 <_malloc_r+0x20>
 80042e6:	6005      	str	r5, [r0, #0]
 80042e8:	e7d6      	b.n	8004298 <_malloc_r+0xa8>
 80042ea:	bf00      	nop
 80042ec:	20000348 	.word	0x20000348

080042f0 <__malloc_lock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	@ (80042f8 <__malloc_lock+0x8>)
 80042f2:	f7ff bf0e 	b.w	8004112 <__retarget_lock_acquire_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000340 	.word	0x20000340

080042fc <__malloc_unlock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	@ (8004304 <__malloc_unlock+0x8>)
 80042fe:	f7ff bf09 	b.w	8004114 <__retarget_lock_release_recursive>
 8004302:	bf00      	nop
 8004304:	20000340 	.word	0x20000340

08004308 <__ssputs_r>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	688e      	ldr	r6, [r1, #8]
 800430e:	461f      	mov	r7, r3
 8004310:	42be      	cmp	r6, r7
 8004312:	680b      	ldr	r3, [r1, #0]
 8004314:	4682      	mov	sl, r0
 8004316:	460c      	mov	r4, r1
 8004318:	4690      	mov	r8, r2
 800431a:	d82d      	bhi.n	8004378 <__ssputs_r+0x70>
 800431c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004324:	d026      	beq.n	8004374 <__ssputs_r+0x6c>
 8004326:	6965      	ldr	r5, [r4, #20]
 8004328:	6909      	ldr	r1, [r1, #16]
 800432a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800432e:	eba3 0901 	sub.w	r9, r3, r1
 8004332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004336:	1c7b      	adds	r3, r7, #1
 8004338:	444b      	add	r3, r9
 800433a:	106d      	asrs	r5, r5, #1
 800433c:	429d      	cmp	r5, r3
 800433e:	bf38      	it	cc
 8004340:	461d      	movcc	r5, r3
 8004342:	0553      	lsls	r3, r2, #21
 8004344:	d527      	bpl.n	8004396 <__ssputs_r+0x8e>
 8004346:	4629      	mov	r1, r5
 8004348:	f7ff ff52 	bl	80041f0 <_malloc_r>
 800434c:	4606      	mov	r6, r0
 800434e:	b360      	cbz	r0, 80043aa <__ssputs_r+0xa2>
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	464a      	mov	r2, r9
 8004354:	f001 f8f8 	bl	8005548 <memcpy>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800435e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	6126      	str	r6, [r4, #16]
 8004366:	6165      	str	r5, [r4, #20]
 8004368:	444e      	add	r6, r9
 800436a:	eba5 0509 	sub.w	r5, r5, r9
 800436e:	6026      	str	r6, [r4, #0]
 8004370:	60a5      	str	r5, [r4, #8]
 8004372:	463e      	mov	r6, r7
 8004374:	42be      	cmp	r6, r7
 8004376:	d900      	bls.n	800437a <__ssputs_r+0x72>
 8004378:	463e      	mov	r6, r7
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	4632      	mov	r2, r6
 800437e:	4641      	mov	r1, r8
 8004380:	f001 f8b8 	bl	80054f4 <memmove>
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	1b9b      	subs	r3, r3, r6
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	4433      	add	r3, r6
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	2000      	movs	r0, #0
 8004392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004396:	462a      	mov	r2, r5
 8004398:	f001 f8e4 	bl	8005564 <_realloc_r>
 800439c:	4606      	mov	r6, r0
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1e0      	bne.n	8004364 <__ssputs_r+0x5c>
 80043a2:	6921      	ldr	r1, [r4, #16]
 80043a4:	4650      	mov	r0, sl
 80043a6:	f7ff feb7 	bl	8004118 <_free_r>
 80043aa:	230c      	movs	r3, #12
 80043ac:	f8ca 3000 	str.w	r3, [sl]
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	e7e9      	b.n	8004392 <__ssputs_r+0x8a>
	...

080043c0 <_svfiprintf_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	4698      	mov	r8, r3
 80043c6:	898b      	ldrh	r3, [r1, #12]
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	b09d      	sub	sp, #116	@ 0x74
 80043cc:	4607      	mov	r7, r0
 80043ce:	460d      	mov	r5, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	d510      	bpl.n	80043f6 <_svfiprintf_r+0x36>
 80043d4:	690b      	ldr	r3, [r1, #16]
 80043d6:	b973      	cbnz	r3, 80043f6 <_svfiprintf_r+0x36>
 80043d8:	2140      	movs	r1, #64	@ 0x40
 80043da:	f7ff ff09 	bl	80041f0 <_malloc_r>
 80043de:	6028      	str	r0, [r5, #0]
 80043e0:	6128      	str	r0, [r5, #16]
 80043e2:	b930      	cbnz	r0, 80043f2 <_svfiprintf_r+0x32>
 80043e4:	230c      	movs	r3, #12
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	b01d      	add	sp, #116	@ 0x74
 80043ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f2:	2340      	movs	r3, #64	@ 0x40
 80043f4:	616b      	str	r3, [r5, #20]
 80043f6:	2300      	movs	r3, #0
 80043f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043fa:	2320      	movs	r3, #32
 80043fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004400:	f8cd 800c 	str.w	r8, [sp, #12]
 8004404:	2330      	movs	r3, #48	@ 0x30
 8004406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045a4 <_svfiprintf_r+0x1e4>
 800440a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800440e:	f04f 0901 	mov.w	r9, #1
 8004412:	4623      	mov	r3, r4
 8004414:	469a      	mov	sl, r3
 8004416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800441a:	b10a      	cbz	r2, 8004420 <_svfiprintf_r+0x60>
 800441c:	2a25      	cmp	r2, #37	@ 0x25
 800441e:	d1f9      	bne.n	8004414 <_svfiprintf_r+0x54>
 8004420:	ebba 0b04 	subs.w	fp, sl, r4
 8004424:	d00b      	beq.n	800443e <_svfiprintf_r+0x7e>
 8004426:	465b      	mov	r3, fp
 8004428:	4622      	mov	r2, r4
 800442a:	4629      	mov	r1, r5
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff ff6b 	bl	8004308 <__ssputs_r>
 8004432:	3001      	adds	r0, #1
 8004434:	f000 80a7 	beq.w	8004586 <_svfiprintf_r+0x1c6>
 8004438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800443a:	445a      	add	r2, fp
 800443c:	9209      	str	r2, [sp, #36]	@ 0x24
 800443e:	f89a 3000 	ldrb.w	r3, [sl]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 809f 	beq.w	8004586 <_svfiprintf_r+0x1c6>
 8004448:	2300      	movs	r3, #0
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004452:	f10a 0a01 	add.w	sl, sl, #1
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	9307      	str	r3, [sp, #28]
 800445a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800445e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004460:	4654      	mov	r4, sl
 8004462:	2205      	movs	r2, #5
 8004464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004468:	484e      	ldr	r0, [pc, #312]	@ (80045a4 <_svfiprintf_r+0x1e4>)
 800446a:	f7fb fec1 	bl	80001f0 <memchr>
 800446e:	9a04      	ldr	r2, [sp, #16]
 8004470:	b9d8      	cbnz	r0, 80044aa <_svfiprintf_r+0xea>
 8004472:	06d0      	lsls	r0, r2, #27
 8004474:	bf44      	itt	mi
 8004476:	2320      	movmi	r3, #32
 8004478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800447c:	0711      	lsls	r1, r2, #28
 800447e:	bf44      	itt	mi
 8004480:	232b      	movmi	r3, #43	@ 0x2b
 8004482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004486:	f89a 3000 	ldrb.w	r3, [sl]
 800448a:	2b2a      	cmp	r3, #42	@ 0x2a
 800448c:	d015      	beq.n	80044ba <_svfiprintf_r+0xfa>
 800448e:	9a07      	ldr	r2, [sp, #28]
 8004490:	4654      	mov	r4, sl
 8004492:	2000      	movs	r0, #0
 8004494:	f04f 0c0a 	mov.w	ip, #10
 8004498:	4621      	mov	r1, r4
 800449a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800449e:	3b30      	subs	r3, #48	@ 0x30
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d94b      	bls.n	800453c <_svfiprintf_r+0x17c>
 80044a4:	b1b0      	cbz	r0, 80044d4 <_svfiprintf_r+0x114>
 80044a6:	9207      	str	r2, [sp, #28]
 80044a8:	e014      	b.n	80044d4 <_svfiprintf_r+0x114>
 80044aa:	eba0 0308 	sub.w	r3, r0, r8
 80044ae:	fa09 f303 	lsl.w	r3, r9, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	9304      	str	r3, [sp, #16]
 80044b6:	46a2      	mov	sl, r4
 80044b8:	e7d2      	b.n	8004460 <_svfiprintf_r+0xa0>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	1d19      	adds	r1, r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	9103      	str	r1, [sp, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfbb      	ittet	lt
 80044c6:	425b      	neglt	r3, r3
 80044c8:	f042 0202 	orrlt.w	r2, r2, #2
 80044cc:	9307      	strge	r3, [sp, #28]
 80044ce:	9307      	strlt	r3, [sp, #28]
 80044d0:	bfb8      	it	lt
 80044d2:	9204      	strlt	r2, [sp, #16]
 80044d4:	7823      	ldrb	r3, [r4, #0]
 80044d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80044d8:	d10a      	bne.n	80044f0 <_svfiprintf_r+0x130>
 80044da:	7863      	ldrb	r3, [r4, #1]
 80044dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044de:	d132      	bne.n	8004546 <_svfiprintf_r+0x186>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	9203      	str	r2, [sp, #12]
 80044e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044ec:	3402      	adds	r4, #2
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045b4 <_svfiprintf_r+0x1f4>
 80044f4:	7821      	ldrb	r1, [r4, #0]
 80044f6:	2203      	movs	r2, #3
 80044f8:	4650      	mov	r0, sl
 80044fa:	f7fb fe79 	bl	80001f0 <memchr>
 80044fe:	b138      	cbz	r0, 8004510 <_svfiprintf_r+0x150>
 8004500:	9b04      	ldr	r3, [sp, #16]
 8004502:	eba0 000a 	sub.w	r0, r0, sl
 8004506:	2240      	movs	r2, #64	@ 0x40
 8004508:	4082      	lsls	r2, r0
 800450a:	4313      	orrs	r3, r2
 800450c:	3401      	adds	r4, #1
 800450e:	9304      	str	r3, [sp, #16]
 8004510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004514:	4824      	ldr	r0, [pc, #144]	@ (80045a8 <_svfiprintf_r+0x1e8>)
 8004516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800451a:	2206      	movs	r2, #6
 800451c:	f7fb fe68 	bl	80001f0 <memchr>
 8004520:	2800      	cmp	r0, #0
 8004522:	d036      	beq.n	8004592 <_svfiprintf_r+0x1d2>
 8004524:	4b21      	ldr	r3, [pc, #132]	@ (80045ac <_svfiprintf_r+0x1ec>)
 8004526:	bb1b      	cbnz	r3, 8004570 <_svfiprintf_r+0x1b0>
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	3307      	adds	r3, #7
 800452c:	f023 0307 	bic.w	r3, r3, #7
 8004530:	3308      	adds	r3, #8
 8004532:	9303      	str	r3, [sp, #12]
 8004534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004536:	4433      	add	r3, r6
 8004538:	9309      	str	r3, [sp, #36]	@ 0x24
 800453a:	e76a      	b.n	8004412 <_svfiprintf_r+0x52>
 800453c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004540:	460c      	mov	r4, r1
 8004542:	2001      	movs	r0, #1
 8004544:	e7a8      	b.n	8004498 <_svfiprintf_r+0xd8>
 8004546:	2300      	movs	r3, #0
 8004548:	3401      	adds	r4, #1
 800454a:	9305      	str	r3, [sp, #20]
 800454c:	4619      	mov	r1, r3
 800454e:	f04f 0c0a 	mov.w	ip, #10
 8004552:	4620      	mov	r0, r4
 8004554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004558:	3a30      	subs	r2, #48	@ 0x30
 800455a:	2a09      	cmp	r2, #9
 800455c:	d903      	bls.n	8004566 <_svfiprintf_r+0x1a6>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0c6      	beq.n	80044f0 <_svfiprintf_r+0x130>
 8004562:	9105      	str	r1, [sp, #20]
 8004564:	e7c4      	b.n	80044f0 <_svfiprintf_r+0x130>
 8004566:	fb0c 2101 	mla	r1, ip, r1, r2
 800456a:	4604      	mov	r4, r0
 800456c:	2301      	movs	r3, #1
 800456e:	e7f0      	b.n	8004552 <_svfiprintf_r+0x192>
 8004570:	ab03      	add	r3, sp, #12
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	462a      	mov	r2, r5
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <_svfiprintf_r+0x1f0>)
 8004578:	a904      	add	r1, sp, #16
 800457a:	4638      	mov	r0, r7
 800457c:	f3af 8000 	nop.w
 8004580:	1c42      	adds	r2, r0, #1
 8004582:	4606      	mov	r6, r0
 8004584:	d1d6      	bne.n	8004534 <_svfiprintf_r+0x174>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	065b      	lsls	r3, r3, #25
 800458a:	f53f af2d 	bmi.w	80043e8 <_svfiprintf_r+0x28>
 800458e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004590:	e72c      	b.n	80043ec <_svfiprintf_r+0x2c>
 8004592:	ab03      	add	r3, sp, #12
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	462a      	mov	r2, r5
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <_svfiprintf_r+0x1f0>)
 800459a:	a904      	add	r1, sp, #16
 800459c:	4638      	mov	r0, r7
 800459e:	f000 fb87 	bl	8004cb0 <_printf_i>
 80045a2:	e7ed      	b.n	8004580 <_svfiprintf_r+0x1c0>
 80045a4:	08005e29 	.word	0x08005e29
 80045a8:	08005e33 	.word	0x08005e33
 80045ac:	00000000 	.word	0x00000000
 80045b0:	08004309 	.word	0x08004309
 80045b4:	08005e2f 	.word	0x08005e2f

080045b8 <_sungetc_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	1c4b      	adds	r3, r1, #1
 80045bc:	4614      	mov	r4, r2
 80045be:	d103      	bne.n	80045c8 <_sungetc_r+0x10>
 80045c0:	f04f 35ff 	mov.w	r5, #4294967295
 80045c4:	4628      	mov	r0, r5
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	8993      	ldrh	r3, [r2, #12]
 80045ca:	f023 0320 	bic.w	r3, r3, #32
 80045ce:	8193      	strh	r3, [r2, #12]
 80045d0:	6853      	ldr	r3, [r2, #4]
 80045d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045d4:	b2cd      	uxtb	r5, r1
 80045d6:	b18a      	cbz	r2, 80045fc <_sungetc_r+0x44>
 80045d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80045da:	429a      	cmp	r2, r3
 80045dc:	dd08      	ble.n	80045f0 <_sungetc_r+0x38>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	6022      	str	r2, [r4, #0]
 80045e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	3301      	adds	r3, #1
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	e7e9      	b.n	80045c4 <_sungetc_r+0xc>
 80045f0:	4621      	mov	r1, r4
 80045f2:	f000 feb0 	bl	8005356 <__submore>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d0f1      	beq.n	80045de <_sungetc_r+0x26>
 80045fa:	e7e1      	b.n	80045c0 <_sungetc_r+0x8>
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	b141      	cbz	r1, 8004614 <_sungetc_r+0x5c>
 8004602:	4291      	cmp	r1, r2
 8004604:	d206      	bcs.n	8004614 <_sungetc_r+0x5c>
 8004606:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800460a:	42a9      	cmp	r1, r5
 800460c:	d102      	bne.n	8004614 <_sungetc_r+0x5c>
 800460e:	3a01      	subs	r2, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	e7ea      	b.n	80045ea <_sungetc_r+0x32>
 8004614:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800461c:	6363      	str	r3, [r4, #52]	@ 0x34
 800461e:	2303      	movs	r3, #3
 8004620:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004622:	4623      	mov	r3, r4
 8004624:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	2301      	movs	r3, #1
 800462c:	e7de      	b.n	80045ec <_sungetc_r+0x34>

0800462e <__ssrefill_r>:
 800462e:	b510      	push	{r4, lr}
 8004630:	460c      	mov	r4, r1
 8004632:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004634:	b169      	cbz	r1, 8004652 <__ssrefill_r+0x24>
 8004636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800463a:	4299      	cmp	r1, r3
 800463c:	d001      	beq.n	8004642 <__ssrefill_r+0x14>
 800463e:	f7ff fd6b 	bl	8004118 <_free_r>
 8004642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	2000      	movs	r0, #0
 8004648:	6360      	str	r0, [r4, #52]	@ 0x34
 800464a:	b113      	cbz	r3, 8004652 <__ssrefill_r+0x24>
 800464c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	bd10      	pop	{r4, pc}
 8004652:	6923      	ldr	r3, [r4, #16]
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	6063      	str	r3, [r4, #4]
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f043 0320 	orr.w	r3, r3, #32
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	e7f3      	b.n	8004650 <__ssrefill_r+0x22>

08004668 <__ssvfiscanf_r>:
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	460c      	mov	r4, r1
 800466e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004672:	2100      	movs	r1, #0
 8004674:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004678:	49a5      	ldr	r1, [pc, #660]	@ (8004910 <__ssvfiscanf_r+0x2a8>)
 800467a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800467c:	f10d 0804 	add.w	r8, sp, #4
 8004680:	49a4      	ldr	r1, [pc, #656]	@ (8004914 <__ssvfiscanf_r+0x2ac>)
 8004682:	4fa5      	ldr	r7, [pc, #660]	@ (8004918 <__ssvfiscanf_r+0x2b0>)
 8004684:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004688:	4606      	mov	r6, r0
 800468a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	7813      	ldrb	r3, [r2, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8158 	beq.w	8004946 <__ssvfiscanf_r+0x2de>
 8004696:	5cf9      	ldrb	r1, [r7, r3]
 8004698:	f011 0108 	ands.w	r1, r1, #8
 800469c:	f102 0501 	add.w	r5, r2, #1
 80046a0:	d019      	beq.n	80046d6 <__ssvfiscanf_r+0x6e>
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	dd0f      	ble.n	80046c8 <__ssvfiscanf_r+0x60>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	5cba      	ldrb	r2, [r7, r2]
 80046ae:	0712      	lsls	r2, r2, #28
 80046b0:	d401      	bmi.n	80046b6 <__ssvfiscanf_r+0x4e>
 80046b2:	462a      	mov	r2, r5
 80046b4:	e7eb      	b.n	800468e <__ssvfiscanf_r+0x26>
 80046b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80046b8:	3201      	adds	r2, #1
 80046ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80046bc:	6862      	ldr	r2, [r4, #4]
 80046be:	3301      	adds	r3, #1
 80046c0:	3a01      	subs	r2, #1
 80046c2:	6062      	str	r2, [r4, #4]
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	e7ec      	b.n	80046a2 <__ssvfiscanf_r+0x3a>
 80046c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80046ca:	4621      	mov	r1, r4
 80046cc:	4630      	mov	r0, r6
 80046ce:	4798      	blx	r3
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d0e9      	beq.n	80046a8 <__ssvfiscanf_r+0x40>
 80046d4:	e7ed      	b.n	80046b2 <__ssvfiscanf_r+0x4a>
 80046d6:	2b25      	cmp	r3, #37	@ 0x25
 80046d8:	d012      	beq.n	8004700 <__ssvfiscanf_r+0x98>
 80046da:	4699      	mov	r9, r3
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f340 8093 	ble.w	800480a <__ssvfiscanf_r+0x1a2>
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	7813      	ldrb	r3, [r2, #0]
 80046e8:	454b      	cmp	r3, r9
 80046ea:	f040 812c 	bne.w	8004946 <__ssvfiscanf_r+0x2de>
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80046f6:	3201      	adds	r2, #1
 80046f8:	3301      	adds	r3, #1
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80046fe:	e7d8      	b.n	80046b2 <__ssvfiscanf_r+0x4a>
 8004700:	9141      	str	r1, [sp, #260]	@ 0x104
 8004702:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004704:	7853      	ldrb	r3, [r2, #1]
 8004706:	2b2a      	cmp	r3, #42	@ 0x2a
 8004708:	bf02      	ittt	eq
 800470a:	2310      	moveq	r3, #16
 800470c:	1c95      	addeq	r5, r2, #2
 800470e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004710:	220a      	movs	r2, #10
 8004712:	46a9      	mov	r9, r5
 8004714:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004718:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800471c:	2b09      	cmp	r3, #9
 800471e:	d91e      	bls.n	800475e <__ssvfiscanf_r+0xf6>
 8004720:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800491c <__ssvfiscanf_r+0x2b4>
 8004724:	2203      	movs	r2, #3
 8004726:	4650      	mov	r0, sl
 8004728:	f7fb fd62 	bl	80001f0 <memchr>
 800472c:	b138      	cbz	r0, 800473e <__ssvfiscanf_r+0xd6>
 800472e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004730:	eba0 000a 	sub.w	r0, r0, sl
 8004734:	2301      	movs	r3, #1
 8004736:	4083      	lsls	r3, r0
 8004738:	4313      	orrs	r3, r2
 800473a:	9341      	str	r3, [sp, #260]	@ 0x104
 800473c:	464d      	mov	r5, r9
 800473e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004742:	2b78      	cmp	r3, #120	@ 0x78
 8004744:	d806      	bhi.n	8004754 <__ssvfiscanf_r+0xec>
 8004746:	2b57      	cmp	r3, #87	@ 0x57
 8004748:	d810      	bhi.n	800476c <__ssvfiscanf_r+0x104>
 800474a:	2b25      	cmp	r3, #37	@ 0x25
 800474c:	d0c5      	beq.n	80046da <__ssvfiscanf_r+0x72>
 800474e:	d857      	bhi.n	8004800 <__ssvfiscanf_r+0x198>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d065      	beq.n	8004820 <__ssvfiscanf_r+0x1b8>
 8004754:	2303      	movs	r3, #3
 8004756:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004758:	230a      	movs	r3, #10
 800475a:	9342      	str	r3, [sp, #264]	@ 0x108
 800475c:	e078      	b.n	8004850 <__ssvfiscanf_r+0x1e8>
 800475e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004760:	fb02 1103 	mla	r1, r2, r3, r1
 8004764:	3930      	subs	r1, #48	@ 0x30
 8004766:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004768:	464d      	mov	r5, r9
 800476a:	e7d2      	b.n	8004712 <__ssvfiscanf_r+0xaa>
 800476c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004770:	2a20      	cmp	r2, #32
 8004772:	d8ef      	bhi.n	8004754 <__ssvfiscanf_r+0xec>
 8004774:	a101      	add	r1, pc, #4	@ (adr r1, 800477c <__ssvfiscanf_r+0x114>)
 8004776:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800477a:	bf00      	nop
 800477c:	0800482f 	.word	0x0800482f
 8004780:	08004755 	.word	0x08004755
 8004784:	08004755 	.word	0x08004755
 8004788:	08004889 	.word	0x08004889
 800478c:	08004755 	.word	0x08004755
 8004790:	08004755 	.word	0x08004755
 8004794:	08004755 	.word	0x08004755
 8004798:	08004755 	.word	0x08004755
 800479c:	08004755 	.word	0x08004755
 80047a0:	08004755 	.word	0x08004755
 80047a4:	08004755 	.word	0x08004755
 80047a8:	0800489f 	.word	0x0800489f
 80047ac:	08004885 	.word	0x08004885
 80047b0:	08004807 	.word	0x08004807
 80047b4:	08004807 	.word	0x08004807
 80047b8:	08004807 	.word	0x08004807
 80047bc:	08004755 	.word	0x08004755
 80047c0:	08004841 	.word	0x08004841
 80047c4:	08004755 	.word	0x08004755
 80047c8:	08004755 	.word	0x08004755
 80047cc:	08004755 	.word	0x08004755
 80047d0:	08004755 	.word	0x08004755
 80047d4:	080048af 	.word	0x080048af
 80047d8:	08004849 	.word	0x08004849
 80047dc:	08004827 	.word	0x08004827
 80047e0:	08004755 	.word	0x08004755
 80047e4:	08004755 	.word	0x08004755
 80047e8:	080048ab 	.word	0x080048ab
 80047ec:	08004755 	.word	0x08004755
 80047f0:	08004885 	.word	0x08004885
 80047f4:	08004755 	.word	0x08004755
 80047f8:	08004755 	.word	0x08004755
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	3b45      	subs	r3, #69	@ 0x45
 8004802:	2b02      	cmp	r3, #2
 8004804:	d8a6      	bhi.n	8004754 <__ssvfiscanf_r+0xec>
 8004806:	2305      	movs	r3, #5
 8004808:	e021      	b.n	800484e <__ssvfiscanf_r+0x1e6>
 800480a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800480c:	4621      	mov	r1, r4
 800480e:	4630      	mov	r0, r6
 8004810:	4798      	blx	r3
 8004812:	2800      	cmp	r0, #0
 8004814:	f43f af66 	beq.w	80046e4 <__ssvfiscanf_r+0x7c>
 8004818:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800481a:	2800      	cmp	r0, #0
 800481c:	f040 808b 	bne.w	8004936 <__ssvfiscanf_r+0x2ce>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	e08b      	b.n	800493e <__ssvfiscanf_r+0x2d6>
 8004826:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004828:	f042 0220 	orr.w	r2, r2, #32
 800482c:	9241      	str	r2, [sp, #260]	@ 0x104
 800482e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004834:	9241      	str	r2, [sp, #260]	@ 0x104
 8004836:	2210      	movs	r2, #16
 8004838:	2b6e      	cmp	r3, #110	@ 0x6e
 800483a:	9242      	str	r2, [sp, #264]	@ 0x108
 800483c:	d902      	bls.n	8004844 <__ssvfiscanf_r+0x1dc>
 800483e:	e005      	b.n	800484c <__ssvfiscanf_r+0x1e4>
 8004840:	2300      	movs	r3, #0
 8004842:	9342      	str	r3, [sp, #264]	@ 0x108
 8004844:	2303      	movs	r3, #3
 8004846:	e002      	b.n	800484e <__ssvfiscanf_r+0x1e6>
 8004848:	2308      	movs	r3, #8
 800484a:	9342      	str	r3, [sp, #264]	@ 0x108
 800484c:	2304      	movs	r3, #4
 800484e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	dd39      	ble.n	80048ca <__ssvfiscanf_r+0x262>
 8004856:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004858:	0659      	lsls	r1, r3, #25
 800485a:	d404      	bmi.n	8004866 <__ssvfiscanf_r+0x1fe>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	5cba      	ldrb	r2, [r7, r2]
 8004862:	0712      	lsls	r2, r2, #28
 8004864:	d438      	bmi.n	80048d8 <__ssvfiscanf_r+0x270>
 8004866:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004868:	2b02      	cmp	r3, #2
 800486a:	dc47      	bgt.n	80048fc <__ssvfiscanf_r+0x294>
 800486c:	466b      	mov	r3, sp
 800486e:	4622      	mov	r2, r4
 8004870:	a941      	add	r1, sp, #260	@ 0x104
 8004872:	4630      	mov	r0, r6
 8004874:	f000 fb3c 	bl	8004ef0 <_scanf_chars>
 8004878:	2801      	cmp	r0, #1
 800487a:	d064      	beq.n	8004946 <__ssvfiscanf_r+0x2de>
 800487c:	2802      	cmp	r0, #2
 800487e:	f47f af18 	bne.w	80046b2 <__ssvfiscanf_r+0x4a>
 8004882:	e7c9      	b.n	8004818 <__ssvfiscanf_r+0x1b0>
 8004884:	220a      	movs	r2, #10
 8004886:	e7d7      	b.n	8004838 <__ssvfiscanf_r+0x1d0>
 8004888:	4629      	mov	r1, r5
 800488a:	4640      	mov	r0, r8
 800488c:	f000 fd2a 	bl	80052e4 <__sccl>
 8004890:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004896:	9341      	str	r3, [sp, #260]	@ 0x104
 8004898:	4605      	mov	r5, r0
 800489a:	2301      	movs	r3, #1
 800489c:	e7d7      	b.n	800484e <__ssvfiscanf_r+0x1e6>
 800489e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80048a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80048a6:	2300      	movs	r3, #0
 80048a8:	e7d1      	b.n	800484e <__ssvfiscanf_r+0x1e6>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e7cf      	b.n	800484e <__ssvfiscanf_r+0x1e6>
 80048ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80048b0:	06c3      	lsls	r3, r0, #27
 80048b2:	f53f aefe 	bmi.w	80046b2 <__ssvfiscanf_r+0x4a>
 80048b6:	9b00      	ldr	r3, [sp, #0]
 80048b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80048ba:	1d19      	adds	r1, r3, #4
 80048bc:	9100      	str	r1, [sp, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	07c0      	lsls	r0, r0, #31
 80048c2:	bf4c      	ite	mi
 80048c4:	801a      	strhmi	r2, [r3, #0]
 80048c6:	601a      	strpl	r2, [r3, #0]
 80048c8:	e6f3      	b.n	80046b2 <__ssvfiscanf_r+0x4a>
 80048ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80048cc:	4621      	mov	r1, r4
 80048ce:	4630      	mov	r0, r6
 80048d0:	4798      	blx	r3
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d0bf      	beq.n	8004856 <__ssvfiscanf_r+0x1ee>
 80048d6:	e79f      	b.n	8004818 <__ssvfiscanf_r+0x1b0>
 80048d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80048da:	3201      	adds	r2, #1
 80048dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	3a01      	subs	r2, #1
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	6062      	str	r2, [r4, #4]
 80048e6:	dd02      	ble.n	80048ee <__ssvfiscanf_r+0x286>
 80048e8:	3301      	adds	r3, #1
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	e7b6      	b.n	800485c <__ssvfiscanf_r+0x1f4>
 80048ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80048f0:	4621      	mov	r1, r4
 80048f2:	4630      	mov	r0, r6
 80048f4:	4798      	blx	r3
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d0b0      	beq.n	800485c <__ssvfiscanf_r+0x1f4>
 80048fa:	e78d      	b.n	8004818 <__ssvfiscanf_r+0x1b0>
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	dc0f      	bgt.n	8004920 <__ssvfiscanf_r+0x2b8>
 8004900:	466b      	mov	r3, sp
 8004902:	4622      	mov	r2, r4
 8004904:	a941      	add	r1, sp, #260	@ 0x104
 8004906:	4630      	mov	r0, r6
 8004908:	f000 fb4c 	bl	8004fa4 <_scanf_i>
 800490c:	e7b4      	b.n	8004878 <__ssvfiscanf_r+0x210>
 800490e:	bf00      	nop
 8004910:	080045b9 	.word	0x080045b9
 8004914:	0800462f 	.word	0x0800462f
 8004918:	08005d29 	.word	0x08005d29
 800491c:	08005e2f 	.word	0x08005e2f
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <__ssvfiscanf_r+0x2e4>)
 8004922:	2b00      	cmp	r3, #0
 8004924:	f43f aec5 	beq.w	80046b2 <__ssvfiscanf_r+0x4a>
 8004928:	466b      	mov	r3, sp
 800492a:	4622      	mov	r2, r4
 800492c:	a941      	add	r1, sp, #260	@ 0x104
 800492e:	4630      	mov	r0, r6
 8004930:	f3af 8000 	nop.w
 8004934:	e7a0      	b.n	8004878 <__ssvfiscanf_r+0x210>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	065b      	lsls	r3, r3, #25
 800493a:	f53f af71 	bmi.w	8004820 <__ssvfiscanf_r+0x1b8>
 800493e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004948:	e7f9      	b.n	800493e <__ssvfiscanf_r+0x2d6>
 800494a:	bf00      	nop
 800494c:	00000000 	.word	0x00000000

08004950 <__sfputc_r>:
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	b410      	push	{r4}
 8004958:	6093      	str	r3, [r2, #8]
 800495a:	da08      	bge.n	800496e <__sfputc_r+0x1e>
 800495c:	6994      	ldr	r4, [r2, #24]
 800495e:	42a3      	cmp	r3, r4
 8004960:	db01      	blt.n	8004966 <__sfputc_r+0x16>
 8004962:	290a      	cmp	r1, #10
 8004964:	d103      	bne.n	800496e <__sfputc_r+0x1e>
 8004966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800496a:	f000 bd2e 	b.w	80053ca <__swbuf_r>
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	1c58      	adds	r0, r3, #1
 8004972:	6010      	str	r0, [r2, #0]
 8004974:	7019      	strb	r1, [r3, #0]
 8004976:	4608      	mov	r0, r1
 8004978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800497c:	4770      	bx	lr

0800497e <__sfputs_r>:
 800497e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004980:	4606      	mov	r6, r0
 8004982:	460f      	mov	r7, r1
 8004984:	4614      	mov	r4, r2
 8004986:	18d5      	adds	r5, r2, r3
 8004988:	42ac      	cmp	r4, r5
 800498a:	d101      	bne.n	8004990 <__sfputs_r+0x12>
 800498c:	2000      	movs	r0, #0
 800498e:	e007      	b.n	80049a0 <__sfputs_r+0x22>
 8004990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004994:	463a      	mov	r2, r7
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff ffda 	bl	8004950 <__sfputc_r>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d1f3      	bne.n	8004988 <__sfputs_r+0xa>
 80049a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049a4 <_vfiprintf_r>:
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	460d      	mov	r5, r1
 80049aa:	b09d      	sub	sp, #116	@ 0x74
 80049ac:	4614      	mov	r4, r2
 80049ae:	4698      	mov	r8, r3
 80049b0:	4606      	mov	r6, r0
 80049b2:	b118      	cbz	r0, 80049bc <_vfiprintf_r+0x18>
 80049b4:	6a03      	ldr	r3, [r0, #32]
 80049b6:	b90b      	cbnz	r3, 80049bc <_vfiprintf_r+0x18>
 80049b8:	f7ff fa44 	bl	8003e44 <__sinit>
 80049bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049be:	07d9      	lsls	r1, r3, #31
 80049c0:	d405      	bmi.n	80049ce <_vfiprintf_r+0x2a>
 80049c2:	89ab      	ldrh	r3, [r5, #12]
 80049c4:	059a      	lsls	r2, r3, #22
 80049c6:	d402      	bmi.n	80049ce <_vfiprintf_r+0x2a>
 80049c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049ca:	f7ff fba2 	bl	8004112 <__retarget_lock_acquire_recursive>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	071b      	lsls	r3, r3, #28
 80049d2:	d501      	bpl.n	80049d8 <_vfiprintf_r+0x34>
 80049d4:	692b      	ldr	r3, [r5, #16]
 80049d6:	b99b      	cbnz	r3, 8004a00 <_vfiprintf_r+0x5c>
 80049d8:	4629      	mov	r1, r5
 80049da:	4630      	mov	r0, r6
 80049dc:	f000 fd34 	bl	8005448 <__swsetup_r>
 80049e0:	b170      	cbz	r0, 8004a00 <_vfiprintf_r+0x5c>
 80049e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049e4:	07dc      	lsls	r4, r3, #31
 80049e6:	d504      	bpl.n	80049f2 <_vfiprintf_r+0x4e>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	b01d      	add	sp, #116	@ 0x74
 80049ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	0598      	lsls	r0, r3, #22
 80049f6:	d4f7      	bmi.n	80049e8 <_vfiprintf_r+0x44>
 80049f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049fa:	f7ff fb8b 	bl	8004114 <__retarget_lock_release_recursive>
 80049fe:	e7f3      	b.n	80049e8 <_vfiprintf_r+0x44>
 8004a00:	2300      	movs	r3, #0
 8004a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a04:	2320      	movs	r3, #32
 8004a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a0e:	2330      	movs	r3, #48	@ 0x30
 8004a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004bc0 <_vfiprintf_r+0x21c>
 8004a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a18:	f04f 0901 	mov.w	r9, #1
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	469a      	mov	sl, r3
 8004a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a24:	b10a      	cbz	r2, 8004a2a <_vfiprintf_r+0x86>
 8004a26:	2a25      	cmp	r2, #37	@ 0x25
 8004a28:	d1f9      	bne.n	8004a1e <_vfiprintf_r+0x7a>
 8004a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a2e:	d00b      	beq.n	8004a48 <_vfiprintf_r+0xa4>
 8004a30:	465b      	mov	r3, fp
 8004a32:	4622      	mov	r2, r4
 8004a34:	4629      	mov	r1, r5
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7ff ffa1 	bl	800497e <__sfputs_r>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f000 80a7 	beq.w	8004b90 <_vfiprintf_r+0x1ec>
 8004a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a44:	445a      	add	r2, fp
 8004a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a48:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 809f 	beq.w	8004b90 <_vfiprintf_r+0x1ec>
 8004a52:	2300      	movs	r3, #0
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5c:	f10a 0a01 	add.w	sl, sl, #1
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	9307      	str	r3, [sp, #28]
 8004a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a6a:	4654      	mov	r4, sl
 8004a6c:	2205      	movs	r2, #5
 8004a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a72:	4853      	ldr	r0, [pc, #332]	@ (8004bc0 <_vfiprintf_r+0x21c>)
 8004a74:	f7fb fbbc 	bl	80001f0 <memchr>
 8004a78:	9a04      	ldr	r2, [sp, #16]
 8004a7a:	b9d8      	cbnz	r0, 8004ab4 <_vfiprintf_r+0x110>
 8004a7c:	06d1      	lsls	r1, r2, #27
 8004a7e:	bf44      	itt	mi
 8004a80:	2320      	movmi	r3, #32
 8004a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a86:	0713      	lsls	r3, r2, #28
 8004a88:	bf44      	itt	mi
 8004a8a:	232b      	movmi	r3, #43	@ 0x2b
 8004a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a90:	f89a 3000 	ldrb.w	r3, [sl]
 8004a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a96:	d015      	beq.n	8004ac4 <_vfiprintf_r+0x120>
 8004a98:	9a07      	ldr	r2, [sp, #28]
 8004a9a:	4654      	mov	r4, sl
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f04f 0c0a 	mov.w	ip, #10
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa8:	3b30      	subs	r3, #48	@ 0x30
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d94b      	bls.n	8004b46 <_vfiprintf_r+0x1a2>
 8004aae:	b1b0      	cbz	r0, 8004ade <_vfiprintf_r+0x13a>
 8004ab0:	9207      	str	r2, [sp, #28]
 8004ab2:	e014      	b.n	8004ade <_vfiprintf_r+0x13a>
 8004ab4:	eba0 0308 	sub.w	r3, r0, r8
 8004ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	46a2      	mov	sl, r4
 8004ac2:	e7d2      	b.n	8004a6a <_vfiprintf_r+0xc6>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	1d19      	adds	r1, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9103      	str	r1, [sp, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bfbb      	ittet	lt
 8004ad0:	425b      	neglt	r3, r3
 8004ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad6:	9307      	strge	r3, [sp, #28]
 8004ad8:	9307      	strlt	r3, [sp, #28]
 8004ada:	bfb8      	it	lt
 8004adc:	9204      	strlt	r2, [sp, #16]
 8004ade:	7823      	ldrb	r3, [r4, #0]
 8004ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ae2:	d10a      	bne.n	8004afa <_vfiprintf_r+0x156>
 8004ae4:	7863      	ldrb	r3, [r4, #1]
 8004ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae8:	d132      	bne.n	8004b50 <_vfiprintf_r+0x1ac>
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	1d1a      	adds	r2, r3, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	9203      	str	r2, [sp, #12]
 8004af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004af6:	3402      	adds	r4, #2
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004bd0 <_vfiprintf_r+0x22c>
 8004afe:	7821      	ldrb	r1, [r4, #0]
 8004b00:	2203      	movs	r2, #3
 8004b02:	4650      	mov	r0, sl
 8004b04:	f7fb fb74 	bl	80001f0 <memchr>
 8004b08:	b138      	cbz	r0, 8004b1a <_vfiprintf_r+0x176>
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	eba0 000a 	sub.w	r0, r0, sl
 8004b10:	2240      	movs	r2, #64	@ 0x40
 8004b12:	4082      	lsls	r2, r0
 8004b14:	4313      	orrs	r3, r2
 8004b16:	3401      	adds	r4, #1
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1e:	4829      	ldr	r0, [pc, #164]	@ (8004bc4 <_vfiprintf_r+0x220>)
 8004b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b24:	2206      	movs	r2, #6
 8004b26:	f7fb fb63 	bl	80001f0 <memchr>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d03f      	beq.n	8004bae <_vfiprintf_r+0x20a>
 8004b2e:	4b26      	ldr	r3, [pc, #152]	@ (8004bc8 <_vfiprintf_r+0x224>)
 8004b30:	bb1b      	cbnz	r3, 8004b7a <_vfiprintf_r+0x1d6>
 8004b32:	9b03      	ldr	r3, [sp, #12]
 8004b34:	3307      	adds	r3, #7
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b40:	443b      	add	r3, r7
 8004b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b44:	e76a      	b.n	8004a1c <_vfiprintf_r+0x78>
 8004b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	e7a8      	b.n	8004aa2 <_vfiprintf_r+0xfe>
 8004b50:	2300      	movs	r3, #0
 8004b52:	3401      	adds	r4, #1
 8004b54:	9305      	str	r3, [sp, #20]
 8004b56:	4619      	mov	r1, r3
 8004b58:	f04f 0c0a 	mov.w	ip, #10
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b62:	3a30      	subs	r2, #48	@ 0x30
 8004b64:	2a09      	cmp	r2, #9
 8004b66:	d903      	bls.n	8004b70 <_vfiprintf_r+0x1cc>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0c6      	beq.n	8004afa <_vfiprintf_r+0x156>
 8004b6c:	9105      	str	r1, [sp, #20]
 8004b6e:	e7c4      	b.n	8004afa <_vfiprintf_r+0x156>
 8004b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b74:	4604      	mov	r4, r0
 8004b76:	2301      	movs	r3, #1
 8004b78:	e7f0      	b.n	8004b5c <_vfiprintf_r+0x1b8>
 8004b7a:	ab03      	add	r3, sp, #12
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	462a      	mov	r2, r5
 8004b80:	4b12      	ldr	r3, [pc, #72]	@ (8004bcc <_vfiprintf_r+0x228>)
 8004b82:	a904      	add	r1, sp, #16
 8004b84:	4630      	mov	r0, r6
 8004b86:	f3af 8000 	nop.w
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	1c78      	adds	r0, r7, #1
 8004b8e:	d1d6      	bne.n	8004b3e <_vfiprintf_r+0x19a>
 8004b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b92:	07d9      	lsls	r1, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_vfiprintf_r+0x1fe>
 8004b96:	89ab      	ldrh	r3, [r5, #12]
 8004b98:	059a      	lsls	r2, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_vfiprintf_r+0x1fe>
 8004b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b9e:	f7ff fab9 	bl	8004114 <__retarget_lock_release_recursive>
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	065b      	lsls	r3, r3, #25
 8004ba6:	f53f af1f 	bmi.w	80049e8 <_vfiprintf_r+0x44>
 8004baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bac:	e71e      	b.n	80049ec <_vfiprintf_r+0x48>
 8004bae:	ab03      	add	r3, sp, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <_vfiprintf_r+0x228>)
 8004bb6:	a904      	add	r1, sp, #16
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f879 	bl	8004cb0 <_printf_i>
 8004bbe:	e7e4      	b.n	8004b8a <_vfiprintf_r+0x1e6>
 8004bc0:	08005e29 	.word	0x08005e29
 8004bc4:	08005e33 	.word	0x08005e33
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	0800497f 	.word	0x0800497f
 8004bd0:	08005e2f 	.word	0x08005e2f

08004bd4 <_printf_common>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	4616      	mov	r6, r2
 8004bda:	4698      	mov	r8, r3
 8004bdc:	688a      	ldr	r2, [r1, #8]
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bfb8      	it	lt
 8004be8:	4613      	movlt	r3, r2
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b10a      	cbz	r2, 8004bfa <_printf_common+0x26>
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0699      	lsls	r1, r3, #26
 8004bfe:	bf42      	ittt	mi
 8004c00:	6833      	ldrmi	r3, [r6, #0]
 8004c02:	3302      	addmi	r3, #2
 8004c04:	6033      	strmi	r3, [r6, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	f015 0506 	ands.w	r5, r5, #6
 8004c0c:	d106      	bne.n	8004c1c <_printf_common+0x48>
 8004c0e:	f104 0a19 	add.w	sl, r4, #25
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	6832      	ldr	r2, [r6, #0]
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dc26      	bgt.n	8004c6a <_printf_common+0x96>
 8004c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	3b00      	subs	r3, #0
 8004c24:	bf18      	it	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	0692      	lsls	r2, r2, #26
 8004c2a:	d42b      	bmi.n	8004c84 <_printf_common+0xb0>
 8004c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c30:	4641      	mov	r1, r8
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c8      	blx	r9
 8004c36:	3001      	adds	r0, #1
 8004c38:	d01e      	beq.n	8004c78 <_printf_common+0xa4>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	f003 0306 	and.w	r3, r3, #6
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf02      	ittt	eq
 8004c46:	68e5      	ldreq	r5, [r4, #12]
 8004c48:	6833      	ldreq	r3, [r6, #0]
 8004c4a:	1aed      	subeq	r5, r5, r3
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	bf0c      	ite	eq
 8004c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c54:	2500      	movne	r5, #0
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bfc4      	itt	gt
 8004c5a:	1a9b      	subgt	r3, r3, r2
 8004c5c:	18ed      	addgt	r5, r5, r3
 8004c5e:	2600      	movs	r6, #0
 8004c60:	341a      	adds	r4, #26
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	d11a      	bne.n	8004c9c <_printf_common+0xc8>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e008      	b.n	8004c7c <_printf_common+0xa8>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4641      	mov	r1, r8
 8004c70:	4638      	mov	r0, r7
 8004c72:	47c8      	blx	r9
 8004c74:	3001      	adds	r0, #1
 8004c76:	d103      	bne.n	8004c80 <_printf_common+0xac>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7c6      	b.n	8004c12 <_printf_common+0x3e>
 8004c84:	18e1      	adds	r1, r4, r3
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	2030      	movs	r0, #48	@ 0x30
 8004c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c8e:	4422      	add	r2, r4
 8004c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c98:	3302      	adds	r3, #2
 8004c9a:	e7c7      	b.n	8004c2c <_printf_common+0x58>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c8      	blx	r9
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0e6      	beq.n	8004c78 <_printf_common+0xa4>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7d9      	b.n	8004c62 <_printf_common+0x8e>
	...

08004cb0 <_printf_i>:
 8004cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	7e0f      	ldrb	r7, [r1, #24]
 8004cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cb8:	2f78      	cmp	r7, #120	@ 0x78
 8004cba:	4691      	mov	r9, r2
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	469a      	mov	sl, r3
 8004cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cc6:	d807      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cc8:	2f62      	cmp	r7, #98	@ 0x62
 8004cca:	d80a      	bhi.n	8004ce2 <_printf_i+0x32>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	f000 80d2 	beq.w	8004e76 <_printf_i+0x1c6>
 8004cd2:	2f58      	cmp	r7, #88	@ 0x58
 8004cd4:	f000 80b9 	beq.w	8004e4a <_printf_i+0x19a>
 8004cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ce0:	e03a      	b.n	8004d58 <_printf_i+0xa8>
 8004ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ce6:	2b15      	cmp	r3, #21
 8004ce8:	d8f6      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cea:	a101      	add	r1, pc, #4	@ (adr r1, 8004cf0 <_printf_i+0x40>)
 8004cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004cd9 	.word	0x08004cd9
 8004cfc:	08004cd9 	.word	0x08004cd9
 8004d00:	08004cd9 	.word	0x08004cd9
 8004d04:	08004cd9 	.word	0x08004cd9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004cd9 	.word	0x08004cd9
 8004d10:	08004cd9 	.word	0x08004cd9
 8004d14:	08004cd9 	.word	0x08004cd9
 8004d18:	08004cd9 	.word	0x08004cd9
 8004d1c:	08004e5d 	.word	0x08004e5d
 8004d20:	08004d87 	.word	0x08004d87
 8004d24:	08004e17 	.word	0x08004e17
 8004d28:	08004cd9 	.word	0x08004cd9
 8004d2c:	08004cd9 	.word	0x08004cd9
 8004d30:	08004e7f 	.word	0x08004e7f
 8004d34:	08004cd9 	.word	0x08004cd9
 8004d38:	08004d87 	.word	0x08004d87
 8004d3c:	08004cd9 	.word	0x08004cd9
 8004d40:	08004cd9 	.word	0x08004cd9
 8004d44:	08004e1f 	.word	0x08004e1f
 8004d48:	6833      	ldr	r3, [r6, #0]
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6032      	str	r2, [r6, #0]
 8004d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e09d      	b.n	8004e98 <_printf_i+0x1e8>
 8004d5c:	6833      	ldr	r3, [r6, #0]
 8004d5e:	6820      	ldr	r0, [r4, #0]
 8004d60:	1d19      	adds	r1, r3, #4
 8004d62:	6031      	str	r1, [r6, #0]
 8004d64:	0606      	lsls	r6, r0, #24
 8004d66:	d501      	bpl.n	8004d6c <_printf_i+0xbc>
 8004d68:	681d      	ldr	r5, [r3, #0]
 8004d6a:	e003      	b.n	8004d74 <_printf_i+0xc4>
 8004d6c:	0645      	lsls	r5, r0, #25
 8004d6e:	d5fb      	bpl.n	8004d68 <_printf_i+0xb8>
 8004d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	da03      	bge.n	8004d80 <_printf_i+0xd0>
 8004d78:	232d      	movs	r3, #45	@ 0x2d
 8004d7a:	426d      	negs	r5, r5
 8004d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d80:	4859      	ldr	r0, [pc, #356]	@ (8004ee8 <_printf_i+0x238>)
 8004d82:	230a      	movs	r3, #10
 8004d84:	e011      	b.n	8004daa <_printf_i+0xfa>
 8004d86:	6821      	ldr	r1, [r4, #0]
 8004d88:	6833      	ldr	r3, [r6, #0]
 8004d8a:	0608      	lsls	r0, r1, #24
 8004d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d90:	d402      	bmi.n	8004d98 <_printf_i+0xe8>
 8004d92:	0649      	lsls	r1, r1, #25
 8004d94:	bf48      	it	mi
 8004d96:	b2ad      	uxthmi	r5, r5
 8004d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d9a:	4853      	ldr	r0, [pc, #332]	@ (8004ee8 <_printf_i+0x238>)
 8004d9c:	6033      	str	r3, [r6, #0]
 8004d9e:	bf14      	ite	ne
 8004da0:	230a      	movne	r3, #10
 8004da2:	2308      	moveq	r3, #8
 8004da4:	2100      	movs	r1, #0
 8004da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004daa:	6866      	ldr	r6, [r4, #4]
 8004dac:	60a6      	str	r6, [r4, #8]
 8004dae:	2e00      	cmp	r6, #0
 8004db0:	bfa2      	ittt	ge
 8004db2:	6821      	ldrge	r1, [r4, #0]
 8004db4:	f021 0104 	bicge.w	r1, r1, #4
 8004db8:	6021      	strge	r1, [r4, #0]
 8004dba:	b90d      	cbnz	r5, 8004dc0 <_printf_i+0x110>
 8004dbc:	2e00      	cmp	r6, #0
 8004dbe:	d04b      	beq.n	8004e58 <_printf_i+0x1a8>
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8004dca:	5dc7      	ldrb	r7, [r0, r7]
 8004dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dd0:	462f      	mov	r7, r5
 8004dd2:	42bb      	cmp	r3, r7
 8004dd4:	460d      	mov	r5, r1
 8004dd6:	d9f4      	bls.n	8004dc2 <_printf_i+0x112>
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10b      	bne.n	8004df4 <_printf_i+0x144>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	07df      	lsls	r7, r3, #31
 8004de0:	d508      	bpl.n	8004df4 <_printf_i+0x144>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	6861      	ldr	r1, [r4, #4]
 8004de6:	4299      	cmp	r1, r3
 8004de8:	bfde      	ittt	le
 8004dea:	2330      	movle	r3, #48	@ 0x30
 8004dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004df4:	1b92      	subs	r2, r2, r6
 8004df6:	6122      	str	r2, [r4, #16]
 8004df8:	f8cd a000 	str.w	sl, [sp]
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	aa03      	add	r2, sp, #12
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7ff fee6 	bl	8004bd4 <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d14a      	bne.n	8004ea2 <_printf_i+0x1f2>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b004      	add	sp, #16
 8004e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f043 0320 	orr.w	r3, r3, #32
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	4833      	ldr	r0, [pc, #204]	@ (8004eec <_printf_i+0x23c>)
 8004e20:	2778      	movs	r7, #120	@ 0x78
 8004e22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	6831      	ldr	r1, [r6, #0]
 8004e2a:	061f      	lsls	r7, r3, #24
 8004e2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e30:	d402      	bmi.n	8004e38 <_printf_i+0x188>
 8004e32:	065f      	lsls	r7, r3, #25
 8004e34:	bf48      	it	mi
 8004e36:	b2ad      	uxthmi	r5, r5
 8004e38:	6031      	str	r1, [r6, #0]
 8004e3a:	07d9      	lsls	r1, r3, #31
 8004e3c:	bf44      	itt	mi
 8004e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e42:	6023      	strmi	r3, [r4, #0]
 8004e44:	b11d      	cbz	r5, 8004e4e <_printf_i+0x19e>
 8004e46:	2310      	movs	r3, #16
 8004e48:	e7ac      	b.n	8004da4 <_printf_i+0xf4>
 8004e4a:	4827      	ldr	r0, [pc, #156]	@ (8004ee8 <_printf_i+0x238>)
 8004e4c:	e7e9      	b.n	8004e22 <_printf_i+0x172>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	f023 0320 	bic.w	r3, r3, #32
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	e7f6      	b.n	8004e46 <_printf_i+0x196>
 8004e58:	4616      	mov	r6, r2
 8004e5a:	e7bd      	b.n	8004dd8 <_printf_i+0x128>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	6825      	ldr	r5, [r4, #0]
 8004e60:	6961      	ldr	r1, [r4, #20]
 8004e62:	1d18      	adds	r0, r3, #4
 8004e64:	6030      	str	r0, [r6, #0]
 8004e66:	062e      	lsls	r6, r5, #24
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	d501      	bpl.n	8004e70 <_printf_i+0x1c0>
 8004e6c:	6019      	str	r1, [r3, #0]
 8004e6e:	e002      	b.n	8004e76 <_printf_i+0x1c6>
 8004e70:	0668      	lsls	r0, r5, #25
 8004e72:	d5fb      	bpl.n	8004e6c <_printf_i+0x1bc>
 8004e74:	8019      	strh	r1, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	4616      	mov	r6, r2
 8004e7c:	e7bc      	b.n	8004df8 <_printf_i+0x148>
 8004e7e:	6833      	ldr	r3, [r6, #0]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	6032      	str	r2, [r6, #0]
 8004e84:	681e      	ldr	r6, [r3, #0]
 8004e86:	6862      	ldr	r2, [r4, #4]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7fb f9b0 	bl	80001f0 <memchr>
 8004e90:	b108      	cbz	r0, 8004e96 <_printf_i+0x1e6>
 8004e92:	1b80      	subs	r0, r0, r6
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea0:	e7aa      	b.n	8004df8 <_printf_i+0x148>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	47d0      	blx	sl
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0ad      	beq.n	8004e0c <_printf_i+0x15c>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	079b      	lsls	r3, r3, #30
 8004eb4:	d413      	bmi.n	8004ede <_printf_i+0x22e>
 8004eb6:	68e0      	ldr	r0, [r4, #12]
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	4298      	cmp	r0, r3
 8004ebc:	bfb8      	it	lt
 8004ebe:	4618      	movlt	r0, r3
 8004ec0:	e7a6      	b.n	8004e10 <_printf_i+0x160>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4640      	mov	r0, r8
 8004eca:	47d0      	blx	sl
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d09d      	beq.n	8004e0c <_printf_i+0x15c>
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	68e3      	ldr	r3, [r4, #12]
 8004ed4:	9903      	ldr	r1, [sp, #12]
 8004ed6:	1a5b      	subs	r3, r3, r1
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	dcf2      	bgt.n	8004ec2 <_printf_i+0x212>
 8004edc:	e7eb      	b.n	8004eb6 <_printf_i+0x206>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f104 0619 	add.w	r6, r4, #25
 8004ee4:	e7f5      	b.n	8004ed2 <_printf_i+0x222>
 8004ee6:	bf00      	nop
 8004ee8:	08005e3a 	.word	0x08005e3a
 8004eec:	08005e4b 	.word	0x08005e4b

08004ef0 <_scanf_chars>:
 8004ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef4:	4615      	mov	r5, r2
 8004ef6:	688a      	ldr	r2, [r1, #8]
 8004ef8:	4680      	mov	r8, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b932      	cbnz	r2, 8004f0c <_scanf_chars+0x1c>
 8004efe:	698a      	ldr	r2, [r1, #24]
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	bf14      	ite	ne
 8004f04:	f04f 32ff 	movne.w	r2, #4294967295
 8004f08:	2201      	moveq	r2, #1
 8004f0a:	608a      	str	r2, [r1, #8]
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004fa0 <_scanf_chars+0xb0>
 8004f12:	06d1      	lsls	r1, r2, #27
 8004f14:	bf5f      	itttt	pl
 8004f16:	681a      	ldrpl	r2, [r3, #0]
 8004f18:	1d11      	addpl	r1, r2, #4
 8004f1a:	6019      	strpl	r1, [r3, #0]
 8004f1c:	6816      	ldrpl	r6, [r2, #0]
 8004f1e:	2700      	movs	r7, #0
 8004f20:	69a0      	ldr	r0, [r4, #24]
 8004f22:	b188      	cbz	r0, 8004f48 <_scanf_chars+0x58>
 8004f24:	2801      	cmp	r0, #1
 8004f26:	d107      	bne.n	8004f38 <_scanf_chars+0x48>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	6963      	ldr	r3, [r4, #20]
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	b953      	cbnz	r3, 8004f48 <_scanf_chars+0x58>
 8004f32:	2f00      	cmp	r7, #0
 8004f34:	d031      	beq.n	8004f9a <_scanf_chars+0xaa>
 8004f36:	e022      	b.n	8004f7e <_scanf_chars+0x8e>
 8004f38:	2802      	cmp	r0, #2
 8004f3a:	d120      	bne.n	8004f7e <_scanf_chars+0x8e>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	d41a      	bmi.n	8004f7e <_scanf_chars+0x8e>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	06da      	lsls	r2, r3, #27
 8004f4c:	bf5e      	ittt	pl
 8004f4e:	682b      	ldrpl	r3, [r5, #0]
 8004f50:	781b      	ldrbpl	r3, [r3, #0]
 8004f52:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004f56:	682a      	ldr	r2, [r5, #0]
 8004f58:	686b      	ldr	r3, [r5, #4]
 8004f5a:	3201      	adds	r2, #1
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	68a2      	ldr	r2, [r4, #8]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	3a01      	subs	r2, #1
 8004f64:	606b      	str	r3, [r5, #4]
 8004f66:	3701      	adds	r7, #1
 8004f68:	60a2      	str	r2, [r4, #8]
 8004f6a:	b142      	cbz	r2, 8004f7e <_scanf_chars+0x8e>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dcd7      	bgt.n	8004f20 <_scanf_chars+0x30>
 8004f70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004f74:	4629      	mov	r1, r5
 8004f76:	4640      	mov	r0, r8
 8004f78:	4798      	blx	r3
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0d0      	beq.n	8004f20 <_scanf_chars+0x30>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f013 0310 	ands.w	r3, r3, #16
 8004f84:	d105      	bne.n	8004f92 <_scanf_chars+0xa2>
 8004f86:	68e2      	ldr	r2, [r4, #12]
 8004f88:	3201      	adds	r2, #1
 8004f8a:	60e2      	str	r2, [r4, #12]
 8004f8c:	69a2      	ldr	r2, [r4, #24]
 8004f8e:	b102      	cbz	r2, 8004f92 <_scanf_chars+0xa2>
 8004f90:	7033      	strb	r3, [r6, #0]
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	443b      	add	r3, r7
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08005d29 	.word	0x08005d29

08004fa4 <_scanf_i>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	4698      	mov	r8, r3
 8004faa:	4b74      	ldr	r3, [pc, #464]	@ (800517c <_scanf_i+0x1d8>)
 8004fac:	460c      	mov	r4, r1
 8004fae:	4682      	mov	sl, r0
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004fbe:	4b70      	ldr	r3, [pc, #448]	@ (8005180 <_scanf_i+0x1dc>)
 8004fc0:	69a1      	ldr	r1, [r4, #24]
 8004fc2:	4a70      	ldr	r2, [pc, #448]	@ (8005184 <_scanf_i+0x1e0>)
 8004fc4:	2903      	cmp	r1, #3
 8004fc6:	bf08      	it	eq
 8004fc8:	461a      	moveq	r2, r3
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	9201      	str	r2, [sp, #4]
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004fd4:	bf88      	it	hi
 8004fd6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004fda:	4627      	mov	r7, r4
 8004fdc:	bf82      	ittt	hi
 8004fde:	eb03 0905 	addhi.w	r9, r3, r5
 8004fe2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004fe6:	60a3      	strhi	r3, [r4, #8]
 8004fe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004fec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004ff0:	bf98      	it	ls
 8004ff2:	f04f 0900 	movls.w	r9, #0
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	463d      	mov	r5, r7
 8004ffa:	f04f 0b00 	mov.w	fp, #0
 8004ffe:	6831      	ldr	r1, [r6, #0]
 8005000:	ab03      	add	r3, sp, #12
 8005002:	7809      	ldrb	r1, [r1, #0]
 8005004:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005008:	2202      	movs	r2, #2
 800500a:	f7fb f8f1 	bl	80001f0 <memchr>
 800500e:	b328      	cbz	r0, 800505c <_scanf_i+0xb8>
 8005010:	f1bb 0f01 	cmp.w	fp, #1
 8005014:	d159      	bne.n	80050ca <_scanf_i+0x126>
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	b92a      	cbnz	r2, 8005026 <_scanf_i+0x82>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	2108      	movs	r1, #8
 800501e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005022:	6061      	str	r1, [r4, #4]
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800502c:	6022      	str	r2, [r4, #0]
 800502e:	68a2      	ldr	r2, [r4, #8]
 8005030:	1e51      	subs	r1, r2, #1
 8005032:	60a1      	str	r1, [r4, #8]
 8005034:	b192      	cbz	r2, 800505c <_scanf_i+0xb8>
 8005036:	6832      	ldr	r2, [r6, #0]
 8005038:	1c51      	adds	r1, r2, #1
 800503a:	6031      	str	r1, [r6, #0]
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	f805 2b01 	strb.w	r2, [r5], #1
 8005042:	6872      	ldr	r2, [r6, #4]
 8005044:	3a01      	subs	r2, #1
 8005046:	2a00      	cmp	r2, #0
 8005048:	6072      	str	r2, [r6, #4]
 800504a:	dc07      	bgt.n	800505c <_scanf_i+0xb8>
 800504c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005050:	4631      	mov	r1, r6
 8005052:	4650      	mov	r0, sl
 8005054:	4790      	blx	r2
 8005056:	2800      	cmp	r0, #0
 8005058:	f040 8085 	bne.w	8005166 <_scanf_i+0x1c2>
 800505c:	f10b 0b01 	add.w	fp, fp, #1
 8005060:	f1bb 0f03 	cmp.w	fp, #3
 8005064:	d1cb      	bne.n	8004ffe <_scanf_i+0x5a>
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	b90b      	cbnz	r3, 800506e <_scanf_i+0xca>
 800506a:	230a      	movs	r3, #10
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	6863      	ldr	r3, [r4, #4]
 8005070:	4945      	ldr	r1, [pc, #276]	@ (8005188 <_scanf_i+0x1e4>)
 8005072:	6960      	ldr	r0, [r4, #20]
 8005074:	1ac9      	subs	r1, r1, r3
 8005076:	f000 f935 	bl	80052e4 <__sccl>
 800507a:	f04f 0b00 	mov.w	fp, #0
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03d      	beq.n	8005102 <_scanf_i+0x15e>
 8005086:	6831      	ldr	r1, [r6, #0]
 8005088:	6960      	ldr	r0, [r4, #20]
 800508a:	f891 c000 	ldrb.w	ip, [r1]
 800508e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005092:	2800      	cmp	r0, #0
 8005094:	d035      	beq.n	8005102 <_scanf_i+0x15e>
 8005096:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800509a:	d124      	bne.n	80050e6 <_scanf_i+0x142>
 800509c:	0510      	lsls	r0, r2, #20
 800509e:	d522      	bpl.n	80050e6 <_scanf_i+0x142>
 80050a0:	f10b 0b01 	add.w	fp, fp, #1
 80050a4:	f1b9 0f00 	cmp.w	r9, #0
 80050a8:	d003      	beq.n	80050b2 <_scanf_i+0x10e>
 80050aa:	3301      	adds	r3, #1
 80050ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80050b0:	60a3      	str	r3, [r4, #8]
 80050b2:	6873      	ldr	r3, [r6, #4]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	6073      	str	r3, [r6, #4]
 80050ba:	dd1b      	ble.n	80050f4 <_scanf_i+0x150>
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	6033      	str	r3, [r6, #0]
 80050c2:	68a3      	ldr	r3, [r4, #8]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	60a3      	str	r3, [r4, #8]
 80050c8:	e7d9      	b.n	800507e <_scanf_i+0xda>
 80050ca:	f1bb 0f02 	cmp.w	fp, #2
 80050ce:	d1ae      	bne.n	800502e <_scanf_i+0x8a>
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80050d6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80050da:	d1bf      	bne.n	800505c <_scanf_i+0xb8>
 80050dc:	2110      	movs	r1, #16
 80050de:	6061      	str	r1, [r4, #4]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e4:	e7a2      	b.n	800502c <_scanf_i+0x88>
 80050e6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80050ea:	6022      	str	r2, [r4, #0]
 80050ec:	780b      	ldrb	r3, [r1, #0]
 80050ee:	f805 3b01 	strb.w	r3, [r5], #1
 80050f2:	e7de      	b.n	80050b2 <_scanf_i+0x10e>
 80050f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80050f8:	4631      	mov	r1, r6
 80050fa:	4650      	mov	r0, sl
 80050fc:	4798      	blx	r3
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0df      	beq.n	80050c2 <_scanf_i+0x11e>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	05d9      	lsls	r1, r3, #23
 8005106:	d50d      	bpl.n	8005124 <_scanf_i+0x180>
 8005108:	42bd      	cmp	r5, r7
 800510a:	d909      	bls.n	8005120 <_scanf_i+0x17c>
 800510c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005110:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005114:	4632      	mov	r2, r6
 8005116:	4650      	mov	r0, sl
 8005118:	4798      	blx	r3
 800511a:	f105 39ff 	add.w	r9, r5, #4294967295
 800511e:	464d      	mov	r5, r9
 8005120:	42bd      	cmp	r5, r7
 8005122:	d028      	beq.n	8005176 <_scanf_i+0x1d2>
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	f012 0210 	ands.w	r2, r2, #16
 800512a:	d113      	bne.n	8005154 <_scanf_i+0x1b0>
 800512c:	702a      	strb	r2, [r5, #0]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	9e01      	ldr	r6, [sp, #4]
 8005132:	4639      	mov	r1, r7
 8005134:	4650      	mov	r0, sl
 8005136:	47b0      	blx	r6
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	f8c8 2000 	str.w	r2, [r8]
 8005144:	f011 0f20 	tst.w	r1, #32
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	d00f      	beq.n	800516c <_scanf_i+0x1c8>
 800514c:	6018      	str	r0, [r3, #0]
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60e3      	str	r3, [r4, #12]
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	1bed      	subs	r5, r5, r7
 8005158:	445d      	add	r5, fp
 800515a:	442b      	add	r3, r5
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	2000      	movs	r0, #0
 8005160:	b007      	add	sp, #28
 8005162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005166:	f04f 0b00 	mov.w	fp, #0
 800516a:	e7ca      	b.n	8005102 <_scanf_i+0x15e>
 800516c:	07ca      	lsls	r2, r1, #31
 800516e:	bf4c      	ite	mi
 8005170:	8018      	strhmi	r0, [r3, #0]
 8005172:	6018      	strpl	r0, [r3, #0]
 8005174:	e7eb      	b.n	800514e <_scanf_i+0x1aa>
 8005176:	2001      	movs	r0, #1
 8005178:	e7f2      	b.n	8005160 <_scanf_i+0x1bc>
 800517a:	bf00      	nop
 800517c:	08005bec 	.word	0x08005bec
 8005180:	080056b5 	.word	0x080056b5
 8005184:	08005795 	.word	0x08005795
 8005188:	08005e6c 	.word	0x08005e6c

0800518c <__sflush_r>:
 800518c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	0716      	lsls	r6, r2, #28
 8005196:	4605      	mov	r5, r0
 8005198:	460c      	mov	r4, r1
 800519a:	d454      	bmi.n	8005246 <__sflush_r+0xba>
 800519c:	684b      	ldr	r3, [r1, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dc02      	bgt.n	80051a8 <__sflush_r+0x1c>
 80051a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd48      	ble.n	800523a <__sflush_r+0xae>
 80051a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d045      	beq.n	800523a <__sflush_r+0xae>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051b4:	682f      	ldr	r7, [r5, #0]
 80051b6:	6a21      	ldr	r1, [r4, #32]
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	d030      	beq.n	800521e <__sflush_r+0x92>
 80051bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	0759      	lsls	r1, r3, #29
 80051c2:	d505      	bpl.n	80051d0 <__sflush_r+0x44>
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ca:	b10b      	cbz	r3, 80051d0 <__sflush_r+0x44>
 80051cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b0      	blx	r6
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	d106      	bne.n	80051ee <__sflush_r+0x62>
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	291d      	cmp	r1, #29
 80051e4:	d82b      	bhi.n	800523e <__sflush_r+0xb2>
 80051e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005290 <__sflush_r+0x104>)
 80051e8:	410a      	asrs	r2, r1
 80051ea:	07d6      	lsls	r6, r2, #31
 80051ec:	d427      	bmi.n	800523e <__sflush_r+0xb2>
 80051ee:	2200      	movs	r2, #0
 80051f0:	6062      	str	r2, [r4, #4]
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	d504      	bpl.n	8005204 <__sflush_r+0x78>
 80051fa:	1c42      	adds	r2, r0, #1
 80051fc:	d101      	bne.n	8005202 <__sflush_r+0x76>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b903      	cbnz	r3, 8005204 <__sflush_r+0x78>
 8005202:	6560      	str	r0, [r4, #84]	@ 0x54
 8005204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005206:	602f      	str	r7, [r5, #0]
 8005208:	b1b9      	cbz	r1, 800523a <__sflush_r+0xae>
 800520a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800520e:	4299      	cmp	r1, r3
 8005210:	d002      	beq.n	8005218 <__sflush_r+0x8c>
 8005212:	4628      	mov	r0, r5
 8005214:	f7fe ff80 	bl	8004118 <_free_r>
 8005218:	2300      	movs	r3, #0
 800521a:	6363      	str	r3, [r4, #52]	@ 0x34
 800521c:	e00d      	b.n	800523a <__sflush_r+0xae>
 800521e:	2301      	movs	r3, #1
 8005220:	4628      	mov	r0, r5
 8005222:	47b0      	blx	r6
 8005224:	4602      	mov	r2, r0
 8005226:	1c50      	adds	r0, r2, #1
 8005228:	d1c9      	bne.n	80051be <__sflush_r+0x32>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0c6      	beq.n	80051be <__sflush_r+0x32>
 8005230:	2b1d      	cmp	r3, #29
 8005232:	d001      	beq.n	8005238 <__sflush_r+0xac>
 8005234:	2b16      	cmp	r3, #22
 8005236:	d11e      	bne.n	8005276 <__sflush_r+0xea>
 8005238:	602f      	str	r7, [r5, #0]
 800523a:	2000      	movs	r0, #0
 800523c:	e022      	b.n	8005284 <__sflush_r+0xf8>
 800523e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005242:	b21b      	sxth	r3, r3
 8005244:	e01b      	b.n	800527e <__sflush_r+0xf2>
 8005246:	690f      	ldr	r7, [r1, #16]
 8005248:	2f00      	cmp	r7, #0
 800524a:	d0f6      	beq.n	800523a <__sflush_r+0xae>
 800524c:	0793      	lsls	r3, r2, #30
 800524e:	680e      	ldr	r6, [r1, #0]
 8005250:	bf08      	it	eq
 8005252:	694b      	ldreq	r3, [r1, #20]
 8005254:	600f      	str	r7, [r1, #0]
 8005256:	bf18      	it	ne
 8005258:	2300      	movne	r3, #0
 800525a:	eba6 0807 	sub.w	r8, r6, r7
 800525e:	608b      	str	r3, [r1, #8]
 8005260:	f1b8 0f00 	cmp.w	r8, #0
 8005264:	dde9      	ble.n	800523a <__sflush_r+0xae>
 8005266:	6a21      	ldr	r1, [r4, #32]
 8005268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800526a:	4643      	mov	r3, r8
 800526c:	463a      	mov	r2, r7
 800526e:	4628      	mov	r0, r5
 8005270:	47b0      	blx	r6
 8005272:	2800      	cmp	r0, #0
 8005274:	dc08      	bgt.n	8005288 <__sflush_r+0xfc>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	4407      	add	r7, r0
 800528a:	eba8 0800 	sub.w	r8, r8, r0
 800528e:	e7e7      	b.n	8005260 <__sflush_r+0xd4>
 8005290:	dfbffffe 	.word	0xdfbffffe

08005294 <_fflush_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b913      	cbnz	r3, 80052a4 <_fflush_r+0x10>
 800529e:	2500      	movs	r5, #0
 80052a0:	4628      	mov	r0, r5
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	b118      	cbz	r0, 80052ae <_fflush_r+0x1a>
 80052a6:	6a03      	ldr	r3, [r0, #32]
 80052a8:	b90b      	cbnz	r3, 80052ae <_fflush_r+0x1a>
 80052aa:	f7fe fdcb 	bl	8003e44 <__sinit>
 80052ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f3      	beq.n	800529e <_fflush_r+0xa>
 80052b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052b8:	07d0      	lsls	r0, r2, #31
 80052ba:	d404      	bmi.n	80052c6 <_fflush_r+0x32>
 80052bc:	0599      	lsls	r1, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_fflush_r+0x32>
 80052c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052c2:	f7fe ff26 	bl	8004112 <__retarget_lock_acquire_recursive>
 80052c6:	4628      	mov	r0, r5
 80052c8:	4621      	mov	r1, r4
 80052ca:	f7ff ff5f 	bl	800518c <__sflush_r>
 80052ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d0:	07da      	lsls	r2, r3, #31
 80052d2:	4605      	mov	r5, r0
 80052d4:	d4e4      	bmi.n	80052a0 <_fflush_r+0xc>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	059b      	lsls	r3, r3, #22
 80052da:	d4e1      	bmi.n	80052a0 <_fflush_r+0xc>
 80052dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052de:	f7fe ff19 	bl	8004114 <__retarget_lock_release_recursive>
 80052e2:	e7dd      	b.n	80052a0 <_fflush_r+0xc>

080052e4 <__sccl>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	780b      	ldrb	r3, [r1, #0]
 80052e8:	4604      	mov	r4, r0
 80052ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80052ec:	bf0b      	itete	eq
 80052ee:	784b      	ldrbeq	r3, [r1, #1]
 80052f0:	1c4a      	addne	r2, r1, #1
 80052f2:	1c8a      	addeq	r2, r1, #2
 80052f4:	2100      	movne	r1, #0
 80052f6:	bf08      	it	eq
 80052f8:	2101      	moveq	r1, #1
 80052fa:	3801      	subs	r0, #1
 80052fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005300:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005304:	42a8      	cmp	r0, r5
 8005306:	d1fb      	bne.n	8005300 <__sccl+0x1c>
 8005308:	b90b      	cbnz	r3, 800530e <__sccl+0x2a>
 800530a:	1e50      	subs	r0, r2, #1
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	f081 0101 	eor.w	r1, r1, #1
 8005312:	54e1      	strb	r1, [r4, r3]
 8005314:	4610      	mov	r0, r2
 8005316:	4602      	mov	r2, r0
 8005318:	f812 5b01 	ldrb.w	r5, [r2], #1
 800531c:	2d2d      	cmp	r5, #45	@ 0x2d
 800531e:	d005      	beq.n	800532c <__sccl+0x48>
 8005320:	2d5d      	cmp	r5, #93	@ 0x5d
 8005322:	d016      	beq.n	8005352 <__sccl+0x6e>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d0f1      	beq.n	800530c <__sccl+0x28>
 8005328:	462b      	mov	r3, r5
 800532a:	e7f2      	b.n	8005312 <__sccl+0x2e>
 800532c:	7846      	ldrb	r6, [r0, #1]
 800532e:	2e5d      	cmp	r6, #93	@ 0x5d
 8005330:	d0fa      	beq.n	8005328 <__sccl+0x44>
 8005332:	42b3      	cmp	r3, r6
 8005334:	dcf8      	bgt.n	8005328 <__sccl+0x44>
 8005336:	3002      	adds	r0, #2
 8005338:	461a      	mov	r2, r3
 800533a:	3201      	adds	r2, #1
 800533c:	4296      	cmp	r6, r2
 800533e:	54a1      	strb	r1, [r4, r2]
 8005340:	dcfb      	bgt.n	800533a <__sccl+0x56>
 8005342:	1af2      	subs	r2, r6, r3
 8005344:	3a01      	subs	r2, #1
 8005346:	1c5d      	adds	r5, r3, #1
 8005348:	42b3      	cmp	r3, r6
 800534a:	bfa8      	it	ge
 800534c:	2200      	movge	r2, #0
 800534e:	18ab      	adds	r3, r5, r2
 8005350:	e7e1      	b.n	8005316 <__sccl+0x32>
 8005352:	4610      	mov	r0, r2
 8005354:	e7da      	b.n	800530c <__sccl+0x28>

08005356 <__submore>:
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	460c      	mov	r4, r1
 800535c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800535e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005362:	4299      	cmp	r1, r3
 8005364:	d11d      	bne.n	80053a2 <__submore+0x4c>
 8005366:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800536a:	f7fe ff41 	bl	80041f0 <_malloc_r>
 800536e:	b918      	cbnz	r0, 8005378 <__submore+0x22>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800537c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800537e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005382:	6360      	str	r0, [r4, #52]	@ 0x34
 8005384:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005388:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800538c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005390:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005394:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005398:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800539c:	6020      	str	r0, [r4, #0]
 800539e:	2000      	movs	r0, #0
 80053a0:	e7e8      	b.n	8005374 <__submore+0x1e>
 80053a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80053a4:	0077      	lsls	r7, r6, #1
 80053a6:	463a      	mov	r2, r7
 80053a8:	f000 f8dc 	bl	8005564 <_realloc_r>
 80053ac:	4605      	mov	r5, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d0de      	beq.n	8005370 <__submore+0x1a>
 80053b2:	eb00 0806 	add.w	r8, r0, r6
 80053b6:	4601      	mov	r1, r0
 80053b8:	4632      	mov	r2, r6
 80053ba:	4640      	mov	r0, r8
 80053bc:	f000 f8c4 	bl	8005548 <memcpy>
 80053c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80053c4:	f8c4 8000 	str.w	r8, [r4]
 80053c8:	e7e9      	b.n	800539e <__submore+0x48>

080053ca <__swbuf_r>:
 80053ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053cc:	460e      	mov	r6, r1
 80053ce:	4614      	mov	r4, r2
 80053d0:	4605      	mov	r5, r0
 80053d2:	b118      	cbz	r0, 80053dc <__swbuf_r+0x12>
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	b90b      	cbnz	r3, 80053dc <__swbuf_r+0x12>
 80053d8:	f7fe fd34 	bl	8003e44 <__sinit>
 80053dc:	69a3      	ldr	r3, [r4, #24]
 80053de:	60a3      	str	r3, [r4, #8]
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	071a      	lsls	r2, r3, #28
 80053e4:	d501      	bpl.n	80053ea <__swbuf_r+0x20>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	b943      	cbnz	r3, 80053fc <__swbuf_r+0x32>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f82b 	bl	8005448 <__swsetup_r>
 80053f2:	b118      	cbz	r0, 80053fc <__swbuf_r+0x32>
 80053f4:	f04f 37ff 	mov.w	r7, #4294967295
 80053f8:	4638      	mov	r0, r7
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	6922      	ldr	r2, [r4, #16]
 8005400:	1a98      	subs	r0, r3, r2
 8005402:	6963      	ldr	r3, [r4, #20]
 8005404:	b2f6      	uxtb	r6, r6
 8005406:	4283      	cmp	r3, r0
 8005408:	4637      	mov	r7, r6
 800540a:	dc05      	bgt.n	8005418 <__swbuf_r+0x4e>
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f7ff ff40 	bl	8005294 <_fflush_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	d1ed      	bne.n	80053f4 <__swbuf_r+0x2a>
 8005418:	68a3      	ldr	r3, [r4, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	701e      	strb	r6, [r3, #0]
 8005426:	6962      	ldr	r2, [r4, #20]
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d004      	beq.n	8005438 <__swbuf_r+0x6e>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	07db      	lsls	r3, r3, #31
 8005432:	d5e1      	bpl.n	80053f8 <__swbuf_r+0x2e>
 8005434:	2e0a      	cmp	r6, #10
 8005436:	d1df      	bne.n	80053f8 <__swbuf_r+0x2e>
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f7ff ff2a 	bl	8005294 <_fflush_r>
 8005440:	2800      	cmp	r0, #0
 8005442:	d0d9      	beq.n	80053f8 <__swbuf_r+0x2e>
 8005444:	e7d6      	b.n	80053f4 <__swbuf_r+0x2a>
	...

08005448 <__swsetup_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <__swsetup_r+0xa8>)
 800544c:	4605      	mov	r5, r0
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	460c      	mov	r4, r1
 8005452:	b118      	cbz	r0, 800545c <__swsetup_r+0x14>
 8005454:	6a03      	ldr	r3, [r0, #32]
 8005456:	b90b      	cbnz	r3, 800545c <__swsetup_r+0x14>
 8005458:	f7fe fcf4 	bl	8003e44 <__sinit>
 800545c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005460:	0719      	lsls	r1, r3, #28
 8005462:	d422      	bmi.n	80054aa <__swsetup_r+0x62>
 8005464:	06da      	lsls	r2, r3, #27
 8005466:	d407      	bmi.n	8005478 <__swsetup_r+0x30>
 8005468:	2209      	movs	r2, #9
 800546a:	602a      	str	r2, [r5, #0]
 800546c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	e033      	b.n	80054e0 <__swsetup_r+0x98>
 8005478:	0758      	lsls	r0, r3, #29
 800547a:	d512      	bpl.n	80054a2 <__swsetup_r+0x5a>
 800547c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800547e:	b141      	cbz	r1, 8005492 <__swsetup_r+0x4a>
 8005480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <__swsetup_r+0x46>
 8005488:	4628      	mov	r0, r5
 800548a:	f7fe fe45 	bl	8004118 <_free_r>
 800548e:	2300      	movs	r3, #0
 8005490:	6363      	str	r3, [r4, #52]	@ 0x34
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	b94b      	cbnz	r3, 80054c2 <__swsetup_r+0x7a>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d003      	beq.n	80054c2 <__swsetup_r+0x7a>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f991 	bl	80057e4 <__smakebuf_r>
 80054c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c6:	f013 0201 	ands.w	r2, r3, #1
 80054ca:	d00a      	beq.n	80054e2 <__swsetup_r+0x9a>
 80054cc:	2200      	movs	r2, #0
 80054ce:	60a2      	str	r2, [r4, #8]
 80054d0:	6962      	ldr	r2, [r4, #20]
 80054d2:	4252      	negs	r2, r2
 80054d4:	61a2      	str	r2, [r4, #24]
 80054d6:	6922      	ldr	r2, [r4, #16]
 80054d8:	b942      	cbnz	r2, 80054ec <__swsetup_r+0xa4>
 80054da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054de:	d1c5      	bne.n	800546c <__swsetup_r+0x24>
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	0799      	lsls	r1, r3, #30
 80054e4:	bf58      	it	pl
 80054e6:	6962      	ldrpl	r2, [r4, #20]
 80054e8:	60a2      	str	r2, [r4, #8]
 80054ea:	e7f4      	b.n	80054d6 <__swsetup_r+0x8e>
 80054ec:	2000      	movs	r0, #0
 80054ee:	e7f7      	b.n	80054e0 <__swsetup_r+0x98>
 80054f0:	2000001c 	.word	0x2000001c

080054f4 <memmove>:
 80054f4:	4288      	cmp	r0, r1
 80054f6:	b510      	push	{r4, lr}
 80054f8:	eb01 0402 	add.w	r4, r1, r2
 80054fc:	d902      	bls.n	8005504 <memmove+0x10>
 80054fe:	4284      	cmp	r4, r0
 8005500:	4623      	mov	r3, r4
 8005502:	d807      	bhi.n	8005514 <memmove+0x20>
 8005504:	1e43      	subs	r3, r0, #1
 8005506:	42a1      	cmp	r1, r4
 8005508:	d008      	beq.n	800551c <memmove+0x28>
 800550a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800550e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005512:	e7f8      	b.n	8005506 <memmove+0x12>
 8005514:	4402      	add	r2, r0
 8005516:	4601      	mov	r1, r0
 8005518:	428a      	cmp	r2, r1
 800551a:	d100      	bne.n	800551e <memmove+0x2a>
 800551c:	bd10      	pop	{r4, pc}
 800551e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005526:	e7f7      	b.n	8005518 <memmove+0x24>

08005528 <_sbrk_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	@ (8005544 <_sbrk_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fc f858 	bl	80015e8 <_sbrk>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_sbrk_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_sbrk_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	2000033c 	.word	0x2000033c

08005548 <memcpy>:
 8005548:	440a      	add	r2, r1
 800554a:	4291      	cmp	r1, r2
 800554c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005550:	d100      	bne.n	8005554 <memcpy+0xc>
 8005552:	4770      	bx	lr
 8005554:	b510      	push	{r4, lr}
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555e:	4291      	cmp	r1, r2
 8005560:	d1f9      	bne.n	8005556 <memcpy+0xe>
 8005562:	bd10      	pop	{r4, pc}

08005564 <_realloc_r>:
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	4680      	mov	r8, r0
 800556a:	4615      	mov	r5, r2
 800556c:	460c      	mov	r4, r1
 800556e:	b921      	cbnz	r1, 800557a <_realloc_r+0x16>
 8005570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	4611      	mov	r1, r2
 8005576:	f7fe be3b 	b.w	80041f0 <_malloc_r>
 800557a:	b92a      	cbnz	r2, 8005588 <_realloc_r+0x24>
 800557c:	f7fe fdcc 	bl	8004118 <_free_r>
 8005580:	2400      	movs	r4, #0
 8005582:	4620      	mov	r0, r4
 8005584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005588:	f000 f98a 	bl	80058a0 <_malloc_usable_size_r>
 800558c:	4285      	cmp	r5, r0
 800558e:	4606      	mov	r6, r0
 8005590:	d802      	bhi.n	8005598 <_realloc_r+0x34>
 8005592:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005596:	d8f4      	bhi.n	8005582 <_realloc_r+0x1e>
 8005598:	4629      	mov	r1, r5
 800559a:	4640      	mov	r0, r8
 800559c:	f7fe fe28 	bl	80041f0 <_malloc_r>
 80055a0:	4607      	mov	r7, r0
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d0ec      	beq.n	8005580 <_realloc_r+0x1c>
 80055a6:	42b5      	cmp	r5, r6
 80055a8:	462a      	mov	r2, r5
 80055aa:	4621      	mov	r1, r4
 80055ac:	bf28      	it	cs
 80055ae:	4632      	movcs	r2, r6
 80055b0:	f7ff ffca 	bl	8005548 <memcpy>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7fe fdae 	bl	8004118 <_free_r>
 80055bc:	463c      	mov	r4, r7
 80055be:	e7e0      	b.n	8005582 <_realloc_r+0x1e>

080055c0 <_strtol_l.constprop.0>:
 80055c0:	2b24      	cmp	r3, #36	@ 0x24
 80055c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c6:	4686      	mov	lr, r0
 80055c8:	4690      	mov	r8, r2
 80055ca:	d801      	bhi.n	80055d0 <_strtol_l.constprop.0+0x10>
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d106      	bne.n	80055de <_strtol_l.constprop.0+0x1e>
 80055d0:	f7fe fd74 	bl	80040bc <__errno>
 80055d4:	2316      	movs	r3, #22
 80055d6:	6003      	str	r3, [r0, #0]
 80055d8:	2000      	movs	r0, #0
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	4834      	ldr	r0, [pc, #208]	@ (80056b0 <_strtol_l.constprop.0+0xf0>)
 80055e0:	460d      	mov	r5, r1
 80055e2:	462a      	mov	r2, r5
 80055e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055e8:	5d06      	ldrb	r6, [r0, r4]
 80055ea:	f016 0608 	ands.w	r6, r6, #8
 80055ee:	d1f8      	bne.n	80055e2 <_strtol_l.constprop.0+0x22>
 80055f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80055f2:	d12d      	bne.n	8005650 <_strtol_l.constprop.0+0x90>
 80055f4:	782c      	ldrb	r4, [r5, #0]
 80055f6:	2601      	movs	r6, #1
 80055f8:	1c95      	adds	r5, r2, #2
 80055fa:	f033 0210 	bics.w	r2, r3, #16
 80055fe:	d109      	bne.n	8005614 <_strtol_l.constprop.0+0x54>
 8005600:	2c30      	cmp	r4, #48	@ 0x30
 8005602:	d12a      	bne.n	800565a <_strtol_l.constprop.0+0x9a>
 8005604:	782a      	ldrb	r2, [r5, #0]
 8005606:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800560a:	2a58      	cmp	r2, #88	@ 0x58
 800560c:	d125      	bne.n	800565a <_strtol_l.constprop.0+0x9a>
 800560e:	786c      	ldrb	r4, [r5, #1]
 8005610:	2310      	movs	r3, #16
 8005612:	3502      	adds	r5, #2
 8005614:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005618:	f10c 3cff 	add.w	ip, ip, #4294967295
 800561c:	2200      	movs	r2, #0
 800561e:	fbbc f9f3 	udiv	r9, ip, r3
 8005622:	4610      	mov	r0, r2
 8005624:	fb03 ca19 	mls	sl, r3, r9, ip
 8005628:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800562c:	2f09      	cmp	r7, #9
 800562e:	d81b      	bhi.n	8005668 <_strtol_l.constprop.0+0xa8>
 8005630:	463c      	mov	r4, r7
 8005632:	42a3      	cmp	r3, r4
 8005634:	dd27      	ble.n	8005686 <_strtol_l.constprop.0+0xc6>
 8005636:	1c57      	adds	r7, r2, #1
 8005638:	d007      	beq.n	800564a <_strtol_l.constprop.0+0x8a>
 800563a:	4581      	cmp	r9, r0
 800563c:	d320      	bcc.n	8005680 <_strtol_l.constprop.0+0xc0>
 800563e:	d101      	bne.n	8005644 <_strtol_l.constprop.0+0x84>
 8005640:	45a2      	cmp	sl, r4
 8005642:	db1d      	blt.n	8005680 <_strtol_l.constprop.0+0xc0>
 8005644:	fb00 4003 	mla	r0, r0, r3, r4
 8005648:	2201      	movs	r2, #1
 800564a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800564e:	e7eb      	b.n	8005628 <_strtol_l.constprop.0+0x68>
 8005650:	2c2b      	cmp	r4, #43	@ 0x2b
 8005652:	bf04      	itt	eq
 8005654:	782c      	ldrbeq	r4, [r5, #0]
 8005656:	1c95      	addeq	r5, r2, #2
 8005658:	e7cf      	b.n	80055fa <_strtol_l.constprop.0+0x3a>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1da      	bne.n	8005614 <_strtol_l.constprop.0+0x54>
 800565e:	2c30      	cmp	r4, #48	@ 0x30
 8005660:	bf0c      	ite	eq
 8005662:	2308      	moveq	r3, #8
 8005664:	230a      	movne	r3, #10
 8005666:	e7d5      	b.n	8005614 <_strtol_l.constprop.0+0x54>
 8005668:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800566c:	2f19      	cmp	r7, #25
 800566e:	d801      	bhi.n	8005674 <_strtol_l.constprop.0+0xb4>
 8005670:	3c37      	subs	r4, #55	@ 0x37
 8005672:	e7de      	b.n	8005632 <_strtol_l.constprop.0+0x72>
 8005674:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005678:	2f19      	cmp	r7, #25
 800567a:	d804      	bhi.n	8005686 <_strtol_l.constprop.0+0xc6>
 800567c:	3c57      	subs	r4, #87	@ 0x57
 800567e:	e7d8      	b.n	8005632 <_strtol_l.constprop.0+0x72>
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	e7e1      	b.n	800564a <_strtol_l.constprop.0+0x8a>
 8005686:	1c53      	adds	r3, r2, #1
 8005688:	d108      	bne.n	800569c <_strtol_l.constprop.0+0xdc>
 800568a:	2322      	movs	r3, #34	@ 0x22
 800568c:	f8ce 3000 	str.w	r3, [lr]
 8005690:	4660      	mov	r0, ip
 8005692:	f1b8 0f00 	cmp.w	r8, #0
 8005696:	d0a0      	beq.n	80055da <_strtol_l.constprop.0+0x1a>
 8005698:	1e69      	subs	r1, r5, #1
 800569a:	e006      	b.n	80056aa <_strtol_l.constprop.0+0xea>
 800569c:	b106      	cbz	r6, 80056a0 <_strtol_l.constprop.0+0xe0>
 800569e:	4240      	negs	r0, r0
 80056a0:	f1b8 0f00 	cmp.w	r8, #0
 80056a4:	d099      	beq.n	80055da <_strtol_l.constprop.0+0x1a>
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d1f6      	bne.n	8005698 <_strtol_l.constprop.0+0xd8>
 80056aa:	f8c8 1000 	str.w	r1, [r8]
 80056ae:	e794      	b.n	80055da <_strtol_l.constprop.0+0x1a>
 80056b0:	08005d29 	.word	0x08005d29

080056b4 <_strtol_r>:
 80056b4:	f7ff bf84 	b.w	80055c0 <_strtol_l.constprop.0>

080056b8 <_strtoul_l.constprop.0>:
 80056b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056bc:	4e34      	ldr	r6, [pc, #208]	@ (8005790 <_strtoul_l.constprop.0+0xd8>)
 80056be:	4686      	mov	lr, r0
 80056c0:	460d      	mov	r5, r1
 80056c2:	4628      	mov	r0, r5
 80056c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c8:	5d37      	ldrb	r7, [r6, r4]
 80056ca:	f017 0708 	ands.w	r7, r7, #8
 80056ce:	d1f8      	bne.n	80056c2 <_strtoul_l.constprop.0+0xa>
 80056d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80056d2:	d12f      	bne.n	8005734 <_strtoul_l.constprop.0+0x7c>
 80056d4:	782c      	ldrb	r4, [r5, #0]
 80056d6:	2701      	movs	r7, #1
 80056d8:	1c85      	adds	r5, r0, #2
 80056da:	f033 0010 	bics.w	r0, r3, #16
 80056de:	d109      	bne.n	80056f4 <_strtoul_l.constprop.0+0x3c>
 80056e0:	2c30      	cmp	r4, #48	@ 0x30
 80056e2:	d12c      	bne.n	800573e <_strtoul_l.constprop.0+0x86>
 80056e4:	7828      	ldrb	r0, [r5, #0]
 80056e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80056ea:	2858      	cmp	r0, #88	@ 0x58
 80056ec:	d127      	bne.n	800573e <_strtoul_l.constprop.0+0x86>
 80056ee:	786c      	ldrb	r4, [r5, #1]
 80056f0:	2310      	movs	r3, #16
 80056f2:	3502      	adds	r5, #2
 80056f4:	f04f 38ff 	mov.w	r8, #4294967295
 80056f8:	2600      	movs	r6, #0
 80056fa:	fbb8 f8f3 	udiv	r8, r8, r3
 80056fe:	fb03 f908 	mul.w	r9, r3, r8
 8005702:	ea6f 0909 	mvn.w	r9, r9
 8005706:	4630      	mov	r0, r6
 8005708:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800570c:	f1bc 0f09 	cmp.w	ip, #9
 8005710:	d81c      	bhi.n	800574c <_strtoul_l.constprop.0+0x94>
 8005712:	4664      	mov	r4, ip
 8005714:	42a3      	cmp	r3, r4
 8005716:	dd2a      	ble.n	800576e <_strtoul_l.constprop.0+0xb6>
 8005718:	f1b6 3fff 	cmp.w	r6, #4294967295
 800571c:	d007      	beq.n	800572e <_strtoul_l.constprop.0+0x76>
 800571e:	4580      	cmp	r8, r0
 8005720:	d322      	bcc.n	8005768 <_strtoul_l.constprop.0+0xb0>
 8005722:	d101      	bne.n	8005728 <_strtoul_l.constprop.0+0x70>
 8005724:	45a1      	cmp	r9, r4
 8005726:	db1f      	blt.n	8005768 <_strtoul_l.constprop.0+0xb0>
 8005728:	fb00 4003 	mla	r0, r0, r3, r4
 800572c:	2601      	movs	r6, #1
 800572e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005732:	e7e9      	b.n	8005708 <_strtoul_l.constprop.0+0x50>
 8005734:	2c2b      	cmp	r4, #43	@ 0x2b
 8005736:	bf04      	itt	eq
 8005738:	782c      	ldrbeq	r4, [r5, #0]
 800573a:	1c85      	addeq	r5, r0, #2
 800573c:	e7cd      	b.n	80056da <_strtoul_l.constprop.0+0x22>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1d8      	bne.n	80056f4 <_strtoul_l.constprop.0+0x3c>
 8005742:	2c30      	cmp	r4, #48	@ 0x30
 8005744:	bf0c      	ite	eq
 8005746:	2308      	moveq	r3, #8
 8005748:	230a      	movne	r3, #10
 800574a:	e7d3      	b.n	80056f4 <_strtoul_l.constprop.0+0x3c>
 800574c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005750:	f1bc 0f19 	cmp.w	ip, #25
 8005754:	d801      	bhi.n	800575a <_strtoul_l.constprop.0+0xa2>
 8005756:	3c37      	subs	r4, #55	@ 0x37
 8005758:	e7dc      	b.n	8005714 <_strtoul_l.constprop.0+0x5c>
 800575a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800575e:	f1bc 0f19 	cmp.w	ip, #25
 8005762:	d804      	bhi.n	800576e <_strtoul_l.constprop.0+0xb6>
 8005764:	3c57      	subs	r4, #87	@ 0x57
 8005766:	e7d5      	b.n	8005714 <_strtoul_l.constprop.0+0x5c>
 8005768:	f04f 36ff 	mov.w	r6, #4294967295
 800576c:	e7df      	b.n	800572e <_strtoul_l.constprop.0+0x76>
 800576e:	1c73      	adds	r3, r6, #1
 8005770:	d106      	bne.n	8005780 <_strtoul_l.constprop.0+0xc8>
 8005772:	2322      	movs	r3, #34	@ 0x22
 8005774:	f8ce 3000 	str.w	r3, [lr]
 8005778:	4630      	mov	r0, r6
 800577a:	b932      	cbnz	r2, 800578a <_strtoul_l.constprop.0+0xd2>
 800577c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005780:	b107      	cbz	r7, 8005784 <_strtoul_l.constprop.0+0xcc>
 8005782:	4240      	negs	r0, r0
 8005784:	2a00      	cmp	r2, #0
 8005786:	d0f9      	beq.n	800577c <_strtoul_l.constprop.0+0xc4>
 8005788:	b106      	cbz	r6, 800578c <_strtoul_l.constprop.0+0xd4>
 800578a:	1e69      	subs	r1, r5, #1
 800578c:	6011      	str	r1, [r2, #0]
 800578e:	e7f5      	b.n	800577c <_strtoul_l.constprop.0+0xc4>
 8005790:	08005d29 	.word	0x08005d29

08005794 <_strtoul_r>:
 8005794:	f7ff bf90 	b.w	80056b8 <_strtoul_l.constprop.0>

08005798 <__swhatbuf_r>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	460c      	mov	r4, r1
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	b096      	sub	sp, #88	@ 0x58
 80057a4:	4615      	mov	r5, r2
 80057a6:	461e      	mov	r6, r3
 80057a8:	da0d      	bge.n	80057c6 <__swhatbuf_r+0x2e>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2340      	movne	r3, #64	@ 0x40
 80057b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057bc:	2000      	movs	r0, #0
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	b016      	add	sp, #88	@ 0x58
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	466a      	mov	r2, sp
 80057c8:	f000 f848 	bl	800585c <_fstat_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	dbec      	blt.n	80057aa <__swhatbuf_r+0x12>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057da:	4259      	negs	r1, r3
 80057dc:	4159      	adcs	r1, r3
 80057de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e2:	e7eb      	b.n	80057bc <__swhatbuf_r+0x24>

080057e4 <__smakebuf_r>:
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e8:	079d      	lsls	r5, r3, #30
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	d507      	bpl.n	8005800 <__smakebuf_r+0x1c>
 80057f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2301      	movs	r3, #1
 80057fa:	6163      	str	r3, [r4, #20]
 80057fc:	b003      	add	sp, #12
 80057fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005800:	ab01      	add	r3, sp, #4
 8005802:	466a      	mov	r2, sp
 8005804:	f7ff ffc8 	bl	8005798 <__swhatbuf_r>
 8005808:	9f00      	ldr	r7, [sp, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	f7fe fcee 	bl	80041f0 <_malloc_r>
 8005814:	b948      	cbnz	r0, 800582a <__smakebuf_r+0x46>
 8005816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581a:	059a      	lsls	r2, r3, #22
 800581c:	d4ee      	bmi.n	80057fc <__smakebuf_r+0x18>
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	e7e2      	b.n	80057f0 <__smakebuf_r+0xc>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	6020      	str	r0, [r4, #0]
 800582e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800583a:	b15b      	cbz	r3, 8005854 <__smakebuf_r+0x70>
 800583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f81d 	bl	8005880 <_isatty_r>
 8005846:	b128      	cbz	r0, 8005854 <__smakebuf_r+0x70>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	431d      	orrs	r5, r3
 8005858:	81a5      	strh	r5, [r4, #12]
 800585a:	e7cf      	b.n	80057fc <__smakebuf_r+0x18>

0800585c <_fstat_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	@ (800587c <_fstat_r+0x20>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f7fb fe94 	bl	8001596 <_fstat>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d102      	bne.n	8005878 <_fstat_r+0x1c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	b103      	cbz	r3, 8005878 <_fstat_r+0x1c>
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	2000033c 	.word	0x2000033c

08005880 <_isatty_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	@ (800589c <_isatty_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fe93 	bl	80015b6 <_isatty>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_isatty_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_isatty_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	2000033c 	.word	0x2000033c

080058a0 <_malloc_usable_size_r>:
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f18      	subs	r0, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbc      	itt	lt
 80058aa:	580b      	ldrlt	r3, [r1, r0]
 80058ac:	18c0      	addlt	r0, r0, r3
 80058ae:	4770      	bx	lr

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
